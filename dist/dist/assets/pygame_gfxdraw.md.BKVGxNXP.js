import{_ as e,c as p,o as a,aS as r}from"./chunks/framework.Dbjoj8K5.js";const m=JSON.parse('{"title":"gfxdraw | Pygame中文文档","description":"","frontmatter":{},"headers":[],"relativePath":"pygame/gfxdraw.md","filePath":"pygame/gfxdraw.md","lastUpdated":1708595373000}'),o={name:"pygame/gfxdraw.md"},l=r('<h1 id="gfxdraw-pygame中文文档" tabindex="-1">gfxdraw | Pygame中文文档 <a class="header-anchor" href="#gfxdraw-pygame中文文档" aria-label="Permalink to &quot;gfxdraw | Pygame中文文档&quot;">​</a></h1><h2 id="pygame-gfxdraw" tabindex="-1">pygame.gfxdraw <a class="header-anchor" href="#pygame-gfxdraw" aria-label="Permalink to &quot;pygame.gfxdraw&quot;">​</a></h2><blockquote><p>Pygame 中绘制图形的模块。</p></blockquote><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><ul><li>pygame.gfxdraw.pixel() —— 绘制一个像素点</li><li>pygame.gfxdraw.hline() —— 绘制一条水平线</li><li>pygame.gfxdraw.vline() —— 绘制一条垂直线</li><li>pygame.gfxdraw.rectangle() —— 绘制一个矩形边框</li><li>pygame.gfxdraw.box() —— 绘制一个填充的矩形</li><li>pygame.gfxdraw.line() —— 绘制一条直线</li><li>pygame.gfxdraw.circle() —— 绘制一个圆形边框</li><li>pygame.gfxdraw.arc() —— 绘制一条弧线</li><li>pygame.gfxdraw.aacircle() —— 绘制一个平滑（抗锯齿）的圆形</li><li>pygame.gfxdraw.filled_circle() —— 绘制一个填充的圆形</li><li>pygame.gfxdraw.ellipse() —— 绘制一个椭圆形边框</li><li>pygame.gfxdraw.aaellipse() —— 绘制一个平滑（抗锯齿）的椭圆形</li><li>pygame.gfxdraw.filled_ellipse() —— 绘制一个填充的椭圆形</li><li>pygame.gfxdraw.pie() —— 绘制一个扇形边框</li><li>pygame.gfxdraw.trigon() —— 绘制一个三角形边框</li><li>pygame.gfxdraw.aatrigon() —— 绘制一个平滑（抗锯齿）的三角形</li><li>pygame.gfxdraw.filled_trigon() —— 绘制一个填充的三角形</li><li>pygame.gfxdraw.polygon() —— 绘制一个多边形边框</li><li>pygame.gfxdraw.aapolygon() —— 绘制一个平滑（抗锯齿）的多边形</li><li>pygame.gfxdraw.filled_polygon() —— 绘制一个填充的多边形</li><li>pygame.gfxdraw.textured_polygon() —— 绘制一个纹理填充的多边形</li><li>pygame.gfxdraw.bezier() —— 绘制一条贝塞尔曲线</li></ul><p>注意：当前版本 API 函数可能会在下一个版本发生改变或者取消。如果你要使用这个实验性的模块，你的代码将可能会与之后的 Pygame 版本不兼容。</p><p>在一个 Surface 上绘制出几种图形。</p><p>大多数函数中有一个表示 RGB 色彩的三元组参数，有时也接收一个表示 RGBA 色彩的四元组参数，色彩参数也可以是已经映射到 Surface 对象内的像素格式下的一个整数值。</p><p>所有函数的参数都使用固定坐标，坐标和圆的半径仅支持整数描述。</p><p>对于类似绘制矩形函数，尽管传入一个 pygame.Rect 对象才是首选，但也可以接收一个用于描述 rect 的参数，像 (x, y, w, h) 序列。注意，对于一个 pygame.Rect 对象来说，矩形将不包含右边和底边。因此，对于 Rect 的 right 和 bottom 属性的值其实是不再矩形上的。</p><p>绘制平滑和填充的图形，首先使用抗锯齿版本的函数（&quot;aa&quot; 开头的那些），然后使用填充版本的函数。</p><p>例如：</p><p>col = (255, 0, 0) surf.fill((255, 255, 255)) pygame.gfxdraw.aacircle(surf, x, y, 30, col) pygame.gfxdraw.filled_circle(surf, x, y, 30, col) 复制代码</p><p>注意：pygame 不会自动导入 pygame.gfxdraw 模块（因为目前来说，这还是一个实验性的模块），所以你需要在使用之前自己导入。</p><p>线程提示：在调用 C 语言函数部分，都会释放 GIL（Global Interpreter Lock，全局解释器锁）。</p><p>pygame.gfxdraw 模块不同于 draw 模块的 API 函数使用，并且绘制的图形也不一样。因为它打包了 SDL_gfx 库的原函数，而非使用修订后的版本。</p><h3 id="函数详解" tabindex="-1">函数详解 <a class="header-anchor" href="#函数详解" aria-label="Permalink to &quot;函数详解&quot;">​</a></h3><p><code>pygame.gfxdraw.pixel()</code></p><p>绘制一个像素点。</p><p>pixel(surface, x, y, color) -&gt; None</p><p>在 Surface 对象上绘制一个像素点。</p><p><code>pygame.gfxdraw.hline()</code></p><p>绘制一条水平线。</p><p>hline(surface, x1, x2, y, color) -&gt; None</p><p>在 Surface 对象上的 y 坐标处，绘制一条从 x1 到 x2 的直线。</p><p><code>pygame.gfxdraw.vline()</code></p><p>绘制一条垂直线。</p><p>vline(surface, x, y1, y2, color) -&gt; None</p><p>在 Surface 对象上的 x 坐标处，绘制一条从 y1 到 y2 的直线。</p><p><code>pygame.gfxdraw.rectangle()</code></p><p>绘制一个矩形边框。</p><p>rectangle(surface, rect, color) -&gt; None</p><p>在 Surface 对象上绘制一个矩形边框，rect 参数指定矩形的区域。</p><p>记住，Surface.fill() 方法也可以用于绘制填充矩形。事实上，Surface.fill() 可以在一些平台上可以使用硬件加速，无论是软件还是硬件显示模式。</p><p><code>pygame.gfxdraw.box()</code></p><p>绘制一个填充的矩形。</p><p>box(surface, rect, color) -&gt; None</p><p>在 Surface 对象上绘制一个填充的矩形。</p><p><code>pygame.gfxdraw.line()</code></p><p>绘制一条直线。</p><p>line(surface, x1, y1, x2, y2, color) -&gt; None</p><p>在 Surface 对象上绘制一条直线，没有 endcaps。</p><p><code>pygame.gfxdraw.circle()</code></p><p>绘制一个圆形。</p><p>circle(surface, x, y, r, color) -&gt; None</p><p>在 Surface 对象上绘制一个圆形边框。坐标参数 (x,y) 决定圆心的位置，r 参数决定半径长度。没有用颜色进行填充。</p><p><code>pygame.gfxdraw.arc()</code></p><p>绘制一条弧线。</p><p>arc(surface, x, y, r, start, end, color) -&gt; None</p><p>在 Surface 对象上绘制一条弧线。</p><p><code>pygame.gfxdraw.aacircle()</code></p><p>绘制一个平滑（抗锯齿）的圆形。</p><p>aacircle(surface, x, y, r, color) -&gt; None</p><p>在 Surface 对象上绘制一个平滑（抗锯齿）的圆形。</p><p><code>pygame.gfxdraw.filled_circle()</code></p><p>绘制一个填充的圆形。</p><p>filled_circle(surface, x, y, r, color) -&gt; None</p><p>在 Surface 对象上绘制一个填充的原型，填充的颜色由 color 参数指定。</p><p><code>pygame.gfxdraw.ellipse()</code></p><p>绘制一个椭圆形边框。</p><p>ellipse(surface, x, y, rx, ry, color) -&gt; None</p><p>在 Surface 对象上绘制一个椭圆形边框。</p><p><code>pygame.gfxdraw.aaellipse()</code></p><p>绘制一个平滑（抗锯齿）的椭圆形。</p><p>aaellipse(surface, x, y, rx, ry, color) -&gt; None</p><p>在 Surface 对象上绘制一个平滑（抗锯齿）的椭圆形。</p><p><code>pygame.gfxdraw.filled_ellipse()</code></p><p>绘制一个填充的椭圆形。</p><p>filled_ellipse(surface, x, y, rx, ry, color) -&gt; None</p><p>在 Surface 对象上绘制一个填充的椭圆形，填充的颜色由 color 参数指定。</p><p><code>pygame.gfxdraw.pie()</code></p><p>绘制一个扇形边框。</p><p>pie(surface, x, y, r, start, end, color) -&gt; None</p><p>在 Surface 对象上绘制一个扇形边框。</p><p><code>pygame.gfxdraw.trigon()</code></p><p>绘制一个三角形边框。</p><p>trigon(surface, x1, y1, x2, y2, x3, y3, color) -&gt; None</p><p>在 Surface 对象上绘制一个三角形边框。</p><p><code>pygame.gfxdraw.aatrigon()</code></p><p>绘制一个平滑（抗锯齿）的三角形。</p><p>aatrigon(surface, x1, y1, x2, y2, x3, y3, color) -&gt; None</p><p>在 Surface 对象上绘制一个平滑（抗锯齿）的三角形。</p><p><code>pygame.gfxdraw.filled_trigon()</code></p><p>绘制一个填充的三角形。</p><p>filled_trigon(surface, x1, y1, x2, y2, x3, y3, color) -&gt; None</p><p>在 Surface 对象上绘制一个填充的三角形，填充的颜色由 color 参数指定。</p><p><code>pygame.gfxdraw.polygon()</code></p><p>绘制一个多边形边框。</p><p>polygon(surface, points, color) -&gt; None</p><p>在 Surface 对象上绘制一个多边形边框。</p><p><code>pygame.gfxdraw.aapolygon()</code></p><p>绘制一个平滑（抗锯齿）的多边形。</p><p>aapolygon(surface, points, color) -&gt; None</p><p>在 Surface 对象上绘制一个平滑（抗锯齿）的多边形</p><p><code>pygame.gfxdraw.filled_polygon()</code></p><p>绘制一个填充的多边形。</p><p>filled_polygon(surface, points, color) -&gt; None</p><p>在 Surface 对象上绘制一个填充的多边形，填充的颜色由 color 参数指定。</p><p><code>pygame.gfxdraw.textured_polygon()</code></p><p>绘制一个纹理填充的多边形。</p><p>textured_polygon(surface, points, texture, tx, ty) -&gt; None</p><p>在 Surface 对象上绘制一个纹理填充的多边形。</p><p>一个带 alpha 通道的纹理绘制到另一个带 alpha 通道的 Surface 对象上，将不同于使用 Surface.blit() 绘制。</p><p>带 alpha 通道的纹理不能被用于一个 8 位单像素的目标。</p><p><code>pygame.gfxdraw.bezier()</code></p><p>绘制一条贝塞尔曲线。</p><p>bezier(surface, points, steps, color) -&gt; None</p><p>在 Surface 对象上绘制一条贝塞尔曲线。</p>',108),c=[l];function g(d,f,i,t,x,y){return a(),p("div",null,c)}const u=e(o,[["render",g]]);export{m as __pageData,u as default};
