import{_ as e,c as t,o as a,aS as p}from"./chunks/framework.Dbjoj8K5.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pygame/event.md","filePath":"pygame/event.md","lastUpdated":1708595373000}'),n={name:"pygame/event.md"},l=p('<h2 id="pygame-event" tabindex="-1">pygame.event <a class="header-anchor" href="#pygame-event" aria-label="Permalink to &quot;pygame.event&quot;">​</a></h2><blockquote><p>用于处理事件与事件队列的 Pygame 模块。</p></blockquote><ul><li>pygame.event.pump() — 让 Pygame 内部自动处理事件</li><li>pygame.event.get() — 从队列中获取事件</li><li>pygame.event.poll() — 从队列中获取一个事件</li><li>pygame.event.wait() — 等待并从队列中获取一个事件</li><li>pygame.event.peek() — 检测某类型事件是否在队列中</li><li>pygame.event.clear() — 从队列中删除所有的事件</li><li>pygame.event.event_name() — 通过 id 获得该事件的字符串名字</li><li>pygame.event.set_blocked() — 控制哪些事件禁止进入队列</li><li>pygame.event.set_allowed() — 控制哪些事件允许进入队列</li><li>pygame.event.get_blocked() — 检测某一类型的事件是否被禁止进入队列</li><li>pygame.event.set_grab() — 控制输入设备与其他应用程序的共享</li><li>pygame.event.get_grab() — 检测程序是否共享输入设备</li><li>pygame.event.post() — 放置一个新的事件到队列中</li><li>pygame.event.Event() — 创建一个新的事件对象</li><li>pygame.event.EventType — 代表 SDL 事件的 Pygame 对象</li></ul><p>Pygame 通过事件队列控制所有的时间消息。该模块中的程序将帮你管理事件队列。输入队列很大程度依赖于 pygame 的 display 模块。如果 display 没有被初始化，显示模式没有被设置，那么事件队列就还没有开始真正工作。</p><p>常规的队列是由 pygame.event.EventType 定义的事件对象的组成，有多种方法来访问里边的事件对象：从简单的检测事件是否存在，到直接从栈中获取它们。</p><p>所有事件都有一个类型标识符，这个标识符对应的值定义在 NOEVENT 到 NUMEVENTS 之间（类似于 C 语言的宏定义）。用户可以自行定义事件，但类型标识符的值应该高于或等于 USEREVENT。</p><p>获取各种输入设备的状态，推荐你直接通过它们相应的模块（mouse，key 和 joystick）提供的函数访问，而不是通过事件队列； 如果你使用此函数，请记住，Pygame 需要通过一些方式与系统的窗口管理器和平台的其他部分进行通信。为了保持 Pygame 和系统同步，你需要调用 pygame.event.pump() 确保实时更新，你将在游戏的每次循环中调用这个函数。</p><p>事件队列提供了一些简单的过滤。通过阻止某些事件进入事件队列，可以略微提高游戏的性能（因为这样事件队列的尺寸就会小一些，所以说可以略微提升性能）。使用 pygame.event.set_allowed() 和 pygame.event.set_blocked() 来控制某些事件是否允许进入事件队列。默认所有事件都会进入事件队列。</p><p>事件子系统应该在主线程被调用。如果你希望从其他线程中投递事件消息进入事件队列，请使用 fastevent 包。</p><p>Joysticks（游戏手柄）只有在设备初始化后才会发送事件。</p><p>一个 EventType 事件对象包含一个事件类型标识符和一组成员数据（事件对象不包含方法，只有数据）。EventType 对象从 Python 的事件队列中获得，你也可以使用 pygame.event.Event() 函数创建自定义的新事件。</p><p>由于 SDL 的事件队列限制了事件数量的上限（标准的 SDL 1.2 限制为 128），所以当队列已满时，新的事件将会被扔掉。为了防止丢失事件消息，尤其是代表退出的输入事件（因为当用户点击退出按钮没有反应，往往会被认为“死机”了），你的程序必须定期检测事件，并对其进行处理。</p><p>为了加快事件队列的处理速度，可以使用 pygame.event.set_blocked() 函数阻止一些我们不关注的事件进入队列中。</p><p>所有的 EventType 实例对象都拥有一个事件类型标识符，属性名是 type。你也可以通过事件对象的 __dict__ 属性来完全访问其他属性。所有其他成员属性的值都是通过事件对象的字典来传递。</p><p>在做调试和实验时，你可以打印事件对象以及相应的类型和成员。来自系统的事件都有一个事件类型和对应的成员属性，下边是每个事件类型以及对应的成员属性列表：</p><table><thead><tr><th style="text-align:center;">事件类型</th><th style="text-align:center;">成员属性</th></tr></thead><tbody><tr><td style="text-align:center;">QUIT</td><td style="text-align:center;">none</td></tr><tr><td style="text-align:center;">ACTIVEEVENT</td><td style="text-align:center;">gain, state</td></tr><tr><td style="text-align:center;">KEYDOWN</td><td style="text-align:center;">unicode, key, mod</td></tr><tr><td style="text-align:center;">KEYUP</td><td style="text-align:center;">key, mod</td></tr><tr><td style="text-align:center;">MOUSEMOTION</td><td style="text-align:center;">pos, rel, buttons</td></tr><tr><td style="text-align:center;">MOUSEBUTTONUP</td><td style="text-align:center;">pos, button</td></tr><tr><td style="text-align:center;">MOUSEBUTTONDOWN</td><td style="text-align:center;">pos, button</td></tr><tr><td style="text-align:center;">JOYAXISMOTION</td><td style="text-align:center;">joy, axis, value</td></tr><tr><td style="text-align:center;">JOYBALLMOTION</td><td style="text-align:center;">joy, ball, rel</td></tr><tr><td style="text-align:center;">JOYHATMOTION</td><td style="text-align:center;">joy, hat, value</td></tr><tr><td style="text-align:center;">JOYBUTTONUP</td><td style="text-align:center;">joy, button</td></tr><tr><td style="text-align:center;">JOYBUTTONDOWN</td><td style="text-align:center;">joy, button</td></tr><tr><td style="text-align:center;">VIDEORESIZE</td><td style="text-align:center;">size, w, h</td></tr><tr><td style="text-align:center;">VIDEOEXPOSE</td><td style="text-align:center;">none</td></tr><tr><td style="text-align:center;">USEREVENT</td><td style="text-align:center;">code</td></tr></tbody></table><p>事件支持等值比较。如果两个事件具有相同的类型和属性值，那么认为两个事件是相等的。（Pygame 1.9.2 新增加的）</p><h3 id="pygame-event-pump" tabindex="-1">pygame.event.pump() <a class="header-anchor" href="#pygame-event-pump" aria-label="Permalink to &quot;pygame.event.pump()&quot;">​</a></h3><p>让 Pygame 内部自动处理事件。</p><p>pump() -&gt; None</p><p>对于游戏中的每一帧，你都需要通过某种形式去调用事件队列，这将确保你的程序在内部可以与操作系统的其他部分进行交互。如果你不打算使用其他事件函数，那么你应该调用 pygame.event.pump()，这将允许 Pygame 内部自动处理事件。</p><p>如果你的程序始终通过其他 event 模块的函数处理队列中的事件，那么该函数是没必要的。</p><p>事件队列中的内部处理是非常重要的事情。主窗口可能需要重新绘制或对系统做出响应。如果你太长时间没有调用事件队列，系统可能会认定你的程序已锁定（假死）。</p><h3 id="pygame-event-get" tabindex="-1">pygame.event.get() <a class="header-anchor" href="#pygame-event-get" aria-label="Permalink to &quot;pygame.event.get()&quot;">​</a></h3><p>从队列中获取事件。</p><p>get() -&gt; Eventlist</p><p>get(type) -&gt; Eventlist</p><p>get(typelist) -&gt; Eventlist</p><p>这将获取并从队列中删除事件。如果指定一个或多个 type 参数，那么只获取并删除指定类型的事件。</p><p>请注意，如果你只从队列中获取和删除指定的事件，那么久而久之，队列可能被你不关注的事件所填满。</p><h3 id="pygame-event-poll" tabindex="-1">pygame.event.poll() <a class="header-anchor" href="#pygame-event-poll" aria-label="Permalink to &quot;pygame.event.poll()&quot;">​</a></h3><p>从队列中获取一个事件。</p><p>poll() -&gt; EventType instance</p><p>从队列中返回并删除一个事件。</p><p>如果事件队列为空，那么会立刻返回类型为 pygame.NOEVENT 的事件。</p><h3 id="pygame-event-wait" tabindex="-1">pygame.event.wait() <a class="header-anchor" href="#pygame-event-wait" aria-label="Permalink to &quot;pygame.event.wait()&quot;">​</a></h3><p>等待并从队列中获取一个事件。</p><p>wait() -&gt; EventType instance</p><p>从队列中返回并删除一个事件。如果队列为空，那么该函数将持续等待直至队列中有一个事件。当程序在等待时，它将保持睡眠状态。这对于希望与其他应用程序共享系统来说，是非常重要的。</p><h3 id="pygame-event-peek" tabindex="-1">pygame.event.peek() <a class="header-anchor" href="#pygame-event-peek" aria-label="Permalink to &quot;pygame.event.peek()&quot;">​</a></h3><p>检测某类型事件是否在队列中。</p><p>peek(type) -&gt; bool</p><p>peek(typelist) -&gt; bool</p><p>如果参数指定的类型的事件存在于队列中，返回 True。</p><p>如果参数指定多个类型的事件，则只需队列中拥有其中的任何一个事件便返回 True。</p><h3 id="pygame-event-clear" tabindex="-1">pygame.event.clear() <a class="header-anchor" href="#pygame-event-clear" aria-label="Permalink to &quot;pygame.event.clear()&quot;">​</a></h3><p>从队列中删除所有的事件。</p><p>clear() -&gt; None</p><p>clear(type) -&gt; None</p><p>clear(typelist) -&gt; None</p><p>从队列中删除所有的事件，如果通过参数指定事件的类型，则删除该类型的所有事件。该函数的效果跟 pygame.event.get() 相同，只是没有返回任何东西。当处理完关注的事件后，清空整个队列可以提高一些效率。</p><h3 id="pygame-event-event-name" tabindex="-1">pygame.event.event_name() <a class="header-anchor" href="#pygame-event-event-name" aria-label="Permalink to &quot;pygame.event.event_name()&quot;">​</a></h3><p>通过 id 获得该事件的字符串名字。</p><p>event_name(type) -&gt; string</p><p>Pygame 通过整数 id 代表事件类型。如果你需要将这些类型的事件展示给用户看，那么你需要将它们转换成字符串（一堆数字谁知道你想表示啥？）。该函数将返回事件类型对应的字符串名字。返回值是以单词大写的样式（注：DanCiDaXieDe）。</p><h3 id="pygame-event-set-blocked" tabindex="-1">pygame.event.set_blocked() <a class="header-anchor" href="#pygame-event-set-blocked" aria-label="Permalink to &quot;pygame.event.set_blocked()&quot;">​</a></h3><p>控制哪些事件禁止进入队列。</p><p>set_blocked(type) -&gt; None</p><p>set_blocked(typelist) -&gt; None</p><p>set_blocked(None) -&gt; None</p><p>参数指定的类型的事件均不允许出现在事件队列中。默认是允许所有事件进入队列。多次禁止同一类型的事件并不会引发什么问题。</p><p>如果传入 None，则表示允许所有的事件进入队列。</p><h3 id="pygame-event-set-allowed" tabindex="-1">pygame.event.set_allowed() <a class="header-anchor" href="#pygame-event-set-allowed" aria-label="Permalink to &quot;pygame.event.set_allowed()&quot;">​</a></h3><p>控制哪些事件允许进入队列。</p><p>set_allowed(type) -&gt; None</p><p>set_allowed(typelist) -&gt; None</p><p>set_allowed(None) -&gt; None</p><p>参数指定的类型的事件均允许出现在事件队列中。默认是允许所有事件进入队列。多次允许同一类型的事件并不会引发什么问题。</p><p>如果传入 None，则表示禁止所有的事件进入队列。</p><h3 id="pygame-event-get-blocked" tabindex="-1">pygame.event.get_blocked() <a class="header-anchor" href="#pygame-event-get-blocked" aria-label="Permalink to &quot;pygame.event.get_blocked()&quot;">​</a></h3><p>检测某一类型的事件是否被禁止进入队列。</p><p>get_blocked(type) -&gt; bool</p><p>如果参数指定类型的事件被禁止进入队列，则返回 True。</p><h3 id="pygame-event-set-grab" tabindex="-1">pygame.event.set_grab() <a class="header-anchor" href="#pygame-event-set-grab" aria-label="Permalink to &quot;pygame.event.set_grab()&quot;">​</a></h3><p>控制输入设备与其他应用程序的共享。</p><p>set_grab(bool) -&gt; None</p><p>当你的程序运行在窗口环境中，它将与其他拥有焦点的应用程序分享鼠标和键盘设备的输入。如果你的程序设置事件独占为 True，那么你的程序将锁定所有的输入（注：不共享给其他程序了）。</p><p>最好不要经常独占输入，因为这将阻止用户在操作系统上的其他操作。</p><h3 id="pygame-event-get-grab" tabindex="-1">pygame.event.get_grab() <a class="header-anchor" href="#pygame-event-get-grab" aria-label="Permalink to &quot;pygame.event.get_grab()&quot;">​</a></h3><p>检测程序是否共享输入设备。</p><p>get_grab() -&gt; bool</p><p>当程序独占输入事件时，返回 True。使用 pygame.event.set_grab() 函数控制这一状态。</p><h3 id="pygame-event-post" tabindex="-1">pygame.event.post() <a class="header-anchor" href="#pygame-event-post" aria-label="Permalink to &quot;pygame.event.post()&quot;">​</a></h3><p>放置一个新的事件到队列中。</p><p>post(Event) -&gt; None</p><p>该函数将放置一个新的事件到事件队列的末端。这些事件将最迟被其他队列函数获取。</p><p>该函数通常用于放置 pygame.USEREVENT（用户自定义事件）事件到队列中。尽管你可以放置所有类型的事件，但你需要确保为系统事件类型相应的属性传递合适的值。</p><p>如果 SDL 事件队列已满，将抛出 pygame.error 异常。</p><h3 id="pygame-event-event" tabindex="-1">pygame.event.Event() <a class="header-anchor" href="#pygame-event-event" aria-label="Permalink to &quot;pygame.event.Event()&quot;">​</a></h3><p>创建一个新的事件对象。</p><p>Event(type, dict) -&gt; EventType instance</p><p>Event(type, **attributes) -&gt; EventType instance</p><p>根据参数给定的类型创建一个新的事件。dict 参数指定事件的属性以及相应的值。</p><h2 id="class-pygame-event-eventtype" tabindex="-1">class pygame.event.EventType <a class="header-anchor" href="#class-pygame-event-eventtype" aria-label="Permalink to &quot;class pygame.event.EventType&quot;">​</a></h2><blockquote><p>代表 SDL 事件的 Pygame 对象。 pygame.event.EventType.type — SDL event type identifier.</p></blockquote><p>pygame.event.EventType.__dict__ — vent object attribute dictionary</p><p>用于代表 SDL 事件的 Pygame 对象。通过 pygame.event.Event() 创建用户自定义事件。EventType 类型并不是直接可以被调用的。EventType 实例对象支持属性赋值和删除。</p><p><code>type</code></p><p>SDL 事件类型标识符。</p><p>type -&gt; int</p><p>只读。预定义事件标识符是 QUIT 和 MOUSEMOTION 等。对于用于创建的事件对象，这是传递给 pygame.event.Event() 的 type 参数。</p><p><code>__dict__</code></p><p>事件对象的属性字典。</p><p>__dict__ -&gt; dict</p><p>只读。事件类型指定的属性。例如，KEYDOWN 事件包含 unicode，key 和 mod 属性。</p><p>可变属性是 Pygame 1.9.2 新增加的。</p>',106),g=[l];function r(y,o,i,d,m,s){return a(),t("div",null,g)}const h=e(n,[["render",r]]);export{c as __pageData,h as default};
