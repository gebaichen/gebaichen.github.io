import{_ as a,c as s,o as e,aS as i}from"./chunks/framework.Dbjoj8K5.js";const f=JSON.parse('{"title":"Flask其他用法","description":"Flask其他的用法","frontmatter":{"date":"2023.8.22","title":"Flask其他用法","tags":["flask","web","python"],"description":"Flask其他的用法","link":"/flask/flask-others.html"},"headers":[],"relativePath":"flask/flask-others.md","filePath":"flask/flask-others.md","lastUpdated":1700227085000}'),t={name:"flask/flask-others.md"},l=i(`<h1 id="flask请求" tabindex="-1">Flask请求 <a class="header-anchor" href="#flask请求" aria-label="Permalink to &quot;Flask请求&quot;">​</a></h1><h2 id="集成-wsgi-中间件" tabindex="-1">集成 WSGI 中间件 <a class="header-anchor" href="#集成-wsgi-中间件" aria-label="Permalink to &quot;集成 WSGI 中间件&quot;">​</a></h2><p>如果想要在应用中添加一个 WSGI 中间件，那么可以用应用的 wsgi_app 属性来包装。例如，假设需要在 Nginx 后面使用 ProxyFix 中间件，那么可以这样 做:</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> werkzeug.middleware.proxy_fix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ProxyFix</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.wsgi_app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ProxyFix(app.wsgi_app)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>用 <code>app.wsgi_app</code> 来包装，而不用 app 包装，意味着 app 仍旧 指向您的 Flask 应用，而不是指向中间件。这样可以继续直接使用和配置 app 。</p><h2 id="使用-flask-扩展" tabindex="-1">使用 Flask 扩展 <a class="header-anchor" href="#使用-flask-扩展" aria-label="Permalink to &quot;使用 Flask 扩展&quot;">​</a></h2><p>扩展是帮助完成公共任务的包。例如 Flask-SQLAlchemy 为在 Flask 中轻松使 用 SQLAlchemy 提供支持。</p><h2 id="部署到网络服务器" tabindex="-1">部署到网络服务器 <a class="header-anchor" href="#部署到网络服务器" aria-label="Permalink to &quot;部署到网络服务器&quot;">​</a></h2><p>已经准备好部署您的新 Flask 应用了</p>`,9),p=[l];function n(r,h,o,k,d,c){return e(),s("div",null,p)}const m=a(t,[["render",n]]);export{f as __pageData,m as default};
