import{_ as t,c as e,o as r,aS as a}from"./chunks/framework.Dbjoj8K5.js";const x=JSON.parse('{"title":"BufferProxy | Pygame中文文档","description":"","frontmatter":{},"headers":[],"relativePath":"pygame/BufferProxy.md","filePath":"pygame/BufferProxy.md","lastUpdated":1708595373000}'),o={name:"pygame/BufferProxy.md"},l=a('<h1 id="bufferproxy-pygame中文文档" tabindex="-1">BufferProxy | Pygame中文文档 <a class="header-anchor" href="#bufferproxy-pygame中文文档" aria-label="Permalink to &quot;BufferProxy | Pygame中文文档&quot;">​</a></h1><h2 id="class-pygame-bufferproxy" tabindex="-1">class pygame.BufferProxy <a class="header-anchor" href="#class-pygame-bufferproxy" aria-label="Permalink to &quot;class pygame.BufferProxy&quot;">​</a></h2><blockquote><p>BufferProxy 是 Surface 对象通过数组协议导出的一个缓冲对象。</p></blockquote><p>BufferProxy(&lt;parent&gt;) -&gt; BufferProxy</p><h2 id="属性-方法" tabindex="-1">属性 &amp; 方法 <a class="header-anchor" href="#属性-方法" aria-label="Permalink to &quot;属性 &amp; 方法&quot;">​</a></h2><ul><li>pygame.BufferProxy.parent — 返回被打包输出的对象</li><li>pygame.BufferProxy.length — 输出缓冲区的尺寸，以字节为单位</li><li>pygame.BufferProxy.raw — 一个导出缓冲区的拷贝，存储在单一的字节块中</li><li>pygame.BufferProxy.write() — Write raw bytes to object buffer.</li></ul><p>BufferProxy 是 Pygame 支持的一种类型，用于作为 Surface.get_buffer() 和 Surface.get_view() 方法的返回值。对于所有版本的 Python，BufferProxy 对象输出一个 C 结构和 Python 级别的数组接口代表其父对象的缓冲区。</p><p>对于 CPython2.6 及以后版本，使用了一个新的缓冲区接口输出。在 Pgame 中，BufferProxy 是实现 surfarra 模块（用于通过数组接口访问 Surface 对象的像素数据）的关键。</p><p>BufferProxy 实例可以直接通过 Python 代码实现，但无论是作为父对象输出的接口，或者 Python 字典描述的缓冲区布局，该实例（所有的字典项目均基于 Python 级别的数组接口映射方式）均包含以下键：</p><table><thead><tr><th style="text-align:center;">键</th><th style="text-align:center;">值（类型）</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">&quot;shape&quot;</td><td style="text-align:center;">元组</td><td style="text-align:left;">1. 元祖中每个元素表示数组每个维度的长度 <br> 2. 元祖的长度表示数组的维数</td></tr><tr><td style="text-align:center;">&quot;typestr&quot;</td><td style="text-align:center;">字符串</td><td style="text-align:left;">用 3 个字符的字符串来描述数组元素的类型：<br> -- 第 1 个字符表示字节顺序：&#39;&lt;&#39; 表示小端；&#39;&gt;&#39; 表示大端（有关大端和小端的起源：<a href="https://fishc.com.cn/home.php?mod=space&amp;uid=9&amp;do=blog&amp;id=1495" target="_blank" rel="noreferrer">请戳我！</a>）；&#39;|&#39; 表示不适用 <br> -- 第 2 个字符表示元素的类型：&#39;i&#39; 表示带符号整形；&#39;u&#39; 表示无符号整形；&#39;f&#39; 表示浮点型；&#39;V&#39; 表示字节块 <br> -- 第 3 个字符表示每个元素的字节数：1 ~ 9 个字节 <br> 例如：&quot;&lt;u4&quot; 表示无符号 4 个字节的小端整数，通常是 32 位像素的电脑；而 &quot;|V3&quot; 则表示 24 位像素（但没有对应的整数）</td></tr><tr><td style="text-align:center;">&quot;data&quot;</td><td style="text-align:center;">元组</td><td style="text-align:left;">用一个 2 元祖表示物理缓冲区的起始地址和只读标志：起始地址是整型值，而只读标志是布尔类型（False 表示可写入，True 表示只读）</td></tr><tr><td style="text-align:center;">&quot;strides&quot;（可选）</td><td style="text-align:center;">元组</td><td style="text-align:left;">描述步进的信息，需要非 C 的相邻数组，但该元祖的长度必须与 &quot;shape&quot; 相匹配</td></tr><tr><td style="text-align:center;">&quot;parent&quot;（可选）</td><td style="text-align:center;">对象</td><td style="text-align:left;">输出对象，用于保持当缓冲区可见时父对象存活</td></tr><tr><td style="text-align:center;">&quot;before&quot;（可选）</td><td style="text-align:center;">回调函数</td><td style="text-align:left;">1. 指定当 BufferProxy 实例输出缓冲区时的回调函数 <br> 2. 如果指定 &quot;parent&quot; 对象，该回调函数作为参数传递，否则参数为 None <br> 3. 该回调函数对设置父对象锁有用</td></tr><tr><td style="text-align:center;">&quot;after&quot;（可选）</td><td style="text-align:center;">回调函数</td><td style="text-align:left;">1. 指定当 BufferProxy 实例输出缓冲区被释放时的回调函数 <br> 2. 如果指定 &quot;parent&quot; 对象，该回调函数作为参数传递，否则参数为 None <br> 3. 该回调函数对释放父对象锁有用</td></tr></tbody></table><p>该 BufferProxy 类支持的子类，实例变量和弱引用。</p><h2 id="属性-方法详解" tabindex="-1">属性 &amp; 方法详解 <a class="header-anchor" href="#属性-方法详解" aria-label="Permalink to &quot;属性 &amp; 方法详解&quot;">​</a></h2><p><code>parent</code></p><p>返回被打包输出的对象。</p><p>parent -&gt; Surface parent -&gt; &lt;parent&gt;</p><p>返回该 BufferProxy 的 Surface 对象，或者调用 BufferProxy 的对象。</p><p><code>length</code></p><p>输出缓冲区的尺寸，以字节为单位。</p><p>length -&gt; int</p><p>导出数据的有效字节数。对于不连续（不在同一块内存中）数据来说，间隙中的字节并不在计算范围内。该属性等同于 C 的 Py_buffer 结构的 len 字段。</p><p><code>raw</code></p><p>一个导出缓冲区的拷贝，存储在单一的字节块中。</p><p>raw -&gt; bytes</p><p>将缓冲区的数据拷贝为 str 或 bytes 对象，导出数据中的任何间隙将被删除。</p><p><code>write()</code></p><p>写入原始字节到缓冲区对象中。</p><p>write(buffer, offset=0)</p><p>覆盖写入父对象中的字节数据。数据必须是连续的 C 或 F，否则将抛出 ValueError 异常。</p><p>buffer 参数是 str 或 bytes 对象。</p><p>可选参数 offset 指定缓冲区内开始覆盖的起始偏移位置，以字节为单位。</p><p>如果偏移量为负数或大于等于缓冲区的尺寸，将抛出 IndexException 异常。</p><p>如果 len(buffer) &gt; proxy.length + offset，将抛出 ValueError 异常。</p>',32),f=[l];function p(n,u,d,y,s,i){return r(),e("div",null,f)}const g=t(o,[["render",p]]);export{x as __pageData,g as default};
