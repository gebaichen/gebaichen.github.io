import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.b6PMUn9J.js";const h=JSON.parse('{"title":"Flask路由","description":"flask路由的使用","frontmatter":{"date":"2023.8.22","title":"Flask路由","tags":["flask","web","python"],"description":"flask路由的使用","link":"/flask/flask-route.html"},"headers":[],"relativePath":"flask/flask-route.md","filePath":"flask/flask-route.md","lastUpdated":1700227085000}'),p={name:"flask/flask-route.md"},e=l(`<h1 id="flask路由" tabindex="-1">Flask路由 <a class="header-anchor" href="#flask路由" aria-label="Permalink to &quot;Flask路由&quot;">​</a></h1><blockquote><p>注：flask请求方法在本文有演示，如果想详细了解可以看<a href="/flask/flask-request.html">Flask请求</a></p></blockquote><h2 id="老方法" tabindex="-1">老方法 <a class="header-anchor" href="#老方法" aria-label="Permalink to &quot;老方法&quot;">​</a></h2><h3 id="建议" tabindex="-1">建议 <a class="header-anchor" href="#建议" aria-label="Permalink to &quot;建议&quot;">​</a></h3><blockquote><p>建议：先学习老方法，掌握其中的逻辑和用法，在去看新用法，因为新用法的底层和老方法一样</p></blockquote><h3 id="url与端点-路由" tabindex="-1">URL与端点（路由） <a class="header-anchor" href="#url与端点-路由" aria-label="Permalink to &quot;URL与端点（路由）&quot;">​</a></h3><p>视图函数的返回值可以自由修改，返回值作为响应的主体，默认会被浏览器作为 HTML 格式解析，所以可以直接返回一个 HTML 格式的内容：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello, I&#39;m quqi&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">index</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello, I&#39;m quqi&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>保存修改后，只需要在浏览器里刷新页面，你就会看到页面上的内容也会发生变化。</p><h3 id="app-route-的参数" tabindex="-1">app.route 的参数 <a class="header-anchor" href="#app-route-的参数" aria-label="Permalink to &quot;app.route 的参数&quot;">​</a></h3><p>可以自由修改传入 <code>app.route</code> 装饰器里的 URL 规则字符串，来修改访问的网站地址，但要注意以斜线 <code>/</code> 作为开头。例如：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/home&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">home</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;I&#39;m quqi&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">home</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;I&#39;m quqi&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="绑定多个路由" tabindex="-1">绑定多个路由 <a class="header-anchor" href="#绑定多个路由" aria-label="Permalink to &quot;绑定多个路由&quot;">​</a></h3><p>一个函数也可以绑定多个视图url,则需要多个装饰器来操作如下：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/index&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/user&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Welcome to flask !&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/index&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/user&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Welcome to flask !&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>现在无论是访问</p><p><a href="http://127.0.0.1:5000/user" target="_blank" rel="noreferrer">http://127.0.0.1:5000/user</a></p><p><a href="http://127.0.0.1:5000/index" target="_blank" rel="noreferrer">http://127.0.0.1:5000/index</a> 都可以看到返回的内容。</p><h3 id="接收传参" tabindex="-1">接收传参 <a class="header-anchor" href="#接收传参" aria-label="Permalink to &quot;接收传参&quot;">​</a></h3><p>在前面，我们之所以把传入 <code>app.route</code> 装饰器的参数称为 URL 规则，是因为我们也可以在 URL 里定义变量部分。例如下面这个视图函数会处理所有类似 <code>/user/&lt;name&gt;</code> 的请求：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/user/&lt;user&gt;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">user_page</span><span style="color:#E1E4E8;">(user):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;user:</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">user.name</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/user/&lt;user&gt;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">user_page</span><span style="color:#24292E;">(user):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;user:</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">user.name</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>不论你访问</p><p><a href="http://127.0.0.1:5000/user/quqi" target="_blank" rel="noreferrer">http://127.0.0.1:5000/user/quqi</a></p><p><a href="http://127.0.0.1:5000/user/xiaoquqi" target="_blank" rel="noreferrer">http://127.0.0.1:5000/user/xiaoquqi</a></p><p><a href="http://127.0.0.1:5000/user/" target="_blank" rel="noreferrer">http://127.0.0.1:5000/user/</a></p><p>都会触发这个函数。通过下面的方式，我们也可以在视图函数里获取到这个变量值：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/user/&lt;user&gt;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">user_page</span><span style="color:#E1E4E8;">(user):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;User: </span><span style="color:#79B8FF;">{}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.format(user.name)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/user/&lt;user&gt;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">user_page</span><span style="color:#24292E;">(user):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;User: </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(user.name)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如何在一个在一个视图函数中如何访问另外一个视图函数？</p><ul><li><ol><li>求情目标视图的 url</li></ol><ul><li>缺点：一旦 url 变动就会出错</li></ul></li><li><ol start="2"><li>根据函数名去请求 url</li></ol><ul><li>优点： 函数名一般不会修改</li></ul></li></ul><blockquote><p>将来如果修改了 <code>URL</code> ，但没有修改该 <code>URL</code> 对应的函数名，就不用到处去替换 <code>URL</code> 了。</p></blockquote><h3 id="url处理-转化器" tabindex="-1">URL处理（转化器） <a class="header-anchor" href="#url处理-转化器" aria-label="Permalink to &quot;URL处理（转化器）&quot;">​</a></h3><p>从前面的路由列表中可以看到，除了 /hello ，这个程序还包含许多 URL 规则，例如和 send 端点对应的 /send/&lt;mobile_number&gt; 。</p><p>现在请尝试访问 <a href="http://127.0.0.1:5000/send/mobile_number" target="_blank" rel="noreferrer">http://127.0.0.1:5000/send/mobile_number</a> ，在URL中加入一个数字用于当做路由转化器。URL 中的变量部分默认类型为字符串，但 Flask 提供了一些转换器可以在 URL 规则里使用，如表2-6所示。</p><blockquote><p>Flask内置的URL变量转换器</p></blockquote><table><thead><tr><th>转换器</th><th>说 明</th></tr></thead><tbody><tr><td>string</td><td>不包含斜线的字符串（默认值）</td></tr><tr><td>int</td><td>整型</td></tr><tr><td>float</td><td>浮点数</td></tr><tr><td>path</td><td>包含斜线的字符串。static路由的URL规则中的filename变量就使用了这个转换器</td></tr><tr><td>any</td><td>匹配一系列给定值中的一个元素</td></tr><tr><td>uuid</td><td>UUID字符串</td></tr><tr><td>自定义</td><td><a href="/flask/flask-route.html#自定义转换器">根据自己的需要去定义</a></td></tr></tbody></table><p>转换器通过特定的规则指定，即“&lt;转换器：变量名&gt;”。<a href="int:mobile_number" target="_blank" rel="noreferrer">int:mobile_number</a>把 mobile_number 的值转换为整数，因此我们可以在视图函数中直接对year变量进行数学计算：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/send/&lt;int:mobile_number&gt;&#39;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">go_back</span><span style="color:#E1E4E8;">(mobile_number): </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;&lt;p&gt;短信发送到 </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">mobile_number</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> !上面&lt;/p&gt;&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/send/&lt;int:mobile_number&gt;&#39;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">go_back</span><span style="color:#24292E;">(mobile_number): </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;&lt;p&gt;短信发送到 </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">mobile_number</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> !上面&lt;/p&gt;&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>默认的行为不仅仅是转换变量类型，还包括URL匹配。</p><p>将上面的例子以整型匹配数据，可以如下使用：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/users/&lt;int:user_id&gt;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">user_info</span><span style="color:#E1E4E8;">(user_id):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;">(user_id))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;hello user </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">user_id</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/users/&lt;int:user_id&gt;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">user_info</span><span style="color:#24292E;">(user_id):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">type</span><span style="color:#24292E;">(user_id))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;hello user </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">user_id</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="自定义转换器" tabindex="-1">自定义转换器 <a class="header-anchor" href="#自定义转换器" aria-label="Permalink to &quot;自定义转换器&quot;">​</a></h3><p>比如遇到需要检测的内容比如手机号，密码，用户名，等各种数据要检测是否符合条件，更好的至爬虫于门外</p><p>Eg:</p><p>提取手机号 <code>/sms_codes/18249869955</code> 中的手机号数据，Flask内置的转换器就无法满足需求，此时需要自定义转换器。</p><p><strong>定义方法</strong></p><p>自定义转换器主要做3步</p><ol><li><p>创建转换器类，保存匹配时的正则表达式</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> werkzeug.routing </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> BaseConverter</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MobilePhoneNumberConverter</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">BaseConverter</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    regex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#DBEDFF;">1</span><span style="color:#79B8FF;">[3-9]\\d</span><span style="color:#F97583;">{9}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 这里填写正则表达式</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> werkzeug.routing </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> BaseConverter</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MobilePhoneNumberConverter</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">BaseConverter</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    regex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;1</span><span style="color:#005CC5;">[3-9]\\d</span><span style="color:#D73A49;">{9}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 这里填写正则表达式</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>注意<code>regex</code>名字固定</li></ul></li><li><p>将自定义的转换器告知Flask应用</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flask(</span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将自定义转换器添加到转换器字典中，并指定转换器使用时名字为: mobile</span></span>
<span class="line"><span style="color:#E1E4E8;">app.url_map.converters[</span><span style="color:#9ECBFF;">&#39;mobile&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MobilePhoneNumberConverter</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flask(</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将自定义转换器添加到转换器字典中，并指定转换器使用时名字为: mobile</span></span>
<span class="line"><span style="color:#24292E;">app.url_map.converters[</span><span style="color:#032F62;">&#39;mobile&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MobilePhoneNumberConverter</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>在使用转换器的地方定义使用</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/sms_codes/&lt;mobile:mobile_num&gt;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">send_sms_code</span><span style="color:#E1E4E8;">(mob_mobile_numnum):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;发送短信到 </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">mobile_num</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> 上&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/sms_codes/&lt;mobile:mobile_num&gt;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send_sms_code</span><span style="color:#24292E;">(mob_mobile_numnum):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;发送短信到 </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">mobile_num</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> 上&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><h3 id="http请求方法" tabindex="-1">http请求方法 <a class="header-anchor" href="#http请求方法" aria-label="Permalink to &quot;http请求方法&quot;">​</a></h3><p>前面通过 flask routes 命令打印出的路由列表可以看到，每一个路由除了包含URL规则外，还设置了监听的HTTP方法。GET是最常用的 HTTP方法，所以视图函数默认监听的方法类型就是 GET，HEAD、 OPTIONS 方法的请求由 Flask 处理，而像 DELETE、PUT 等方法一般不会在 程序中实现，在后面我们构建 Web API 时才会用到这些方法。</p><p>我们可以在 app.route() 装饰器中使用 methods 参数传入一个包含监听 的 HTTP 方法的可迭代对象。例如，下面的视图函数同时监听 GET 请求和 POST 请求：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/hello&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">methods</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;GET&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">(): </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;h1&gt;Hello, Flask!&lt;/h1&gt;&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">methods</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;GET&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;POST&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">(): </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&lt;h1&gt;Hello, Flask!&lt;/h1&gt;&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="restful-api格式" tabindex="-1">restful api格式 <a class="header-anchor" href="#restful-api格式" aria-label="Permalink to &quot;restful api格式&quot;">​</a></h4><blockquote><p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noreferrer">restful api格式详细见</a></p></blockquote><table><thead><tr><th style="text-align:left;">请求方式</th><th style="text-align:left;">一般作用</th></tr></thead><tbody><tr><td style="text-align:left;">GET</td><td style="text-align:left;">请求获取数据</td></tr><tr><td style="text-align:left;">POST</td><td style="text-align:left;">新增数据</td></tr><tr><td style="text-align:left;">PUT</td><td style="text-align:left;">修改数据</td></tr><tr><td style="text-align:left;">DELETE</td><td style="text-align:left;">删除数据</td></tr><tr><td style="text-align:left;">PATCH</td><td style="text-align:left;">刷新数据</td></tr></tbody></table><h2 id="新方法" tabindex="-1">新方法 <a class="header-anchor" href="#新方法" aria-label="Permalink to &quot;新方法&quot;">​</a></h2><blockquote><p>新方法是flask2.0.1发布时出现的新定义路由的方式方法，比老方法更容易理解和观看</p></blockquote><h3 id="建议-1" tabindex="-1">建议 <a class="header-anchor" href="#建议-1" aria-label="Permalink to &quot;建议&quot;">​</a></h3><blockquote><p>建议：先学习老方法，掌握其中的逻辑和用法，在去看新用法，因为新用法的底层和老方法一样</p></blockquote><h3 id="get请求" tabindex="-1">get请求 <a class="header-anchor" href="#get请求" aria-label="Permalink to &quot;get请求&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/home&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">home</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;home&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">home</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;home&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>用<code>@app.get(&quot;/home&quot;)</code>比<code>@app.route(&quot;/home&quot;, methods=[&quot;GET&quot;])</code>要强一百倍 一个get方法看不出来什么， 如果要是用<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noreferrer">REST-ful api规范</a>那就有福了</p><h3 id="post请求" tabindex="-1">post请求 <a class="header-anchor" href="#post请求" aria-label="Permalink to &quot;post请求&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/home&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">home_post</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;home_post&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">home_post</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;home_post&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="delete、put、patch请求" tabindex="-1">delete、put、patch请求 <a class="header-anchor" href="#delete、put、patch请求" aria-label="Permalink to &quot;delete、put、patch请求&quot;">​</a></h3><p>与get、post 请求同理</p><h3 id="总体看" tabindex="-1">总体看 <a class="header-anchor" href="#总体看" aria-label="Permalink to &quot;总体看&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/home&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;get&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#B392F0;">@app.post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/home&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;post&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#B392F0;">@app.delete</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/home&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;delete&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/home&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;put&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.patch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/home&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">patch</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;patch&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;get&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#6F42C1;">@app.post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;post&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#6F42C1;">@app.delete</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;delete&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;put&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.patch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">patch</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;patch&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/home&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">methods</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;GET&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;PUT&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;PATCH&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;DELETE&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">home</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> request.method </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;GET&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;get&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;"> request.method </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;POST&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;"> request.method </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;PUT&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;PUT&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;"> request.method </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;PATCH&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;PATCH&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;"> request.method </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;DELETE&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;DELETE&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">methods</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;GET&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;POST&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;PUT&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;PATCH&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;DELETE&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">home</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> request.method </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;GET&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;get&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> request.method </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;POST&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;POST&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> request.method </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;PUT&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;PUT&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> request.method </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;PATCH&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;PATCH&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> request.method </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;DELETE&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;DELETE&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>对比来看就知道谁更加好理解了吧</p><h2 id="新老方法总结" tabindex="-1">新老方法总结 <a class="header-anchor" href="#新老方法总结" aria-label="Permalink to &quot;新老方法总结&quot;">​</a></h2><p>1.新方法：更加好理解，比老方法更好看，更容易看懂，更适合前后端分离式，写api （但是写api大多是用flask-restful）</p><p>2.老方法：新方法是基于老方法写的，（<strong>老方法是新方法的底层逻辑</strong>， 不算是最底层，<strong>只是新方法封装了老方法</strong>，<s>老方法是新方法的下一层</s> ）</p><h3 id="建议-2" tabindex="-1">建议 <a class="header-anchor" href="#建议-2" aria-label="Permalink to &quot;建议&quot;">​</a></h3><p>我个人建议开发时不管什么样的都用新方法</p><p>新方法：只适用于前后端分离，部分分离（半分离）式</p><p>老方法：全可以用（分离、不分离、半分离）。老方法比新方法多了个前后端不分离</p><p>不分离是<strong>同步写法</strong>，只有先请求，才能有数据，不能几个一起请求</p><h4 id="同步" tabindex="-1">同步 <a class="header-anchor" href="#同步" aria-label="Permalink to &quot;同步&quot;">​</a></h4><p>浏览器 --&gt; 请求服务器</p><p>浏览器 &lt;-- 服务器</p><p>浏览器 --&gt; 请求服务器</p><p>浏览器 &lt;-- 服务器</p><p>浏览器 --&gt; 请求服务器</p><p>浏览器 &lt;-- 服务器 （服务器返回数据）</p><p>默认的表单，只有请求完一次，才能请求下一次，并且post\\put\\delete...都要返回一个页面，因为默认的form表单 会重定向，只有重定向这个post请求返回一个页面才能显示数据，便于消息闪现</p><p>为什要要这重定向这个post请求返回一个页面，便于消息闪现？？？ 因为flask官方的消息闪现是就是前后端不分离式，开发简单，很容易理解，但是内存开销大</p><h4 id="异步" tabindex="-1">异步 <a class="header-anchor" href="#异步" aria-label="Permalink to &quot;异步&quot;">​</a></h4><p>浏览器 --&gt; 请求服务器</p><p>浏览器 --&gt; 请求服务器</p><p>浏览器 &lt;-- 服务器</p><p>浏览器 --&gt; 请求服务器</p><p>浏览器 &lt;-- 服务器</p><p>浏览器 &lt;-- 服务器</p><p>浏览器 --&gt; 请求服务器</p><p>浏览器 &lt;-- 服务器</p><p>可以几个请求在一起，可以一起接受数据</p><p>这样不用form默认表单进行提交，就需要ajax\\fetch进行提交 返回的数据可以是json格式，请求的接口这就是api，不显示页面不渲染页面，只做逻辑处理并返回结果</p>`,97),o=[e];function t(r,c,y,E,i,d){return a(),n("div",null,o)}const b=s(p,[["render",t]]);export{h as __pageData,b as default};
