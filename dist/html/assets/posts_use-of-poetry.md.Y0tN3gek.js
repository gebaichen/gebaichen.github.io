import{_ as n,o as p,c as l,k as s,a as e,t as o,Q as t}from"./chunks/framework.b6PMUn9J.js";const v=JSON.parse('{"title":"Poetry的基本使用","description":"使用Poetry进行项目打包、管理依赖","frontmatter":{"date":"2023.9.2","title":"Poetry的基本使用","tags":["python","poetry"],"description":"使用Poetry进行项目打包、管理依赖"},"headers":[],"relativePath":"posts/use-of-poetry.md","filePath":"posts/use-of-poetry.md","lastUpdated":1700227085000}'),r={name:"posts/use-of-poetry.md"},c={id:"frontmatter-title",tabindex:"-1"},y=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),i=t(`<p>Python的打包系统和依赖管理相当复杂，对新人来讲尤其费解。要正确地创建Python项目所需要的文件:setup.py, requirements.txt, setup.cfg, <a href="http://MANIFEST.in" target="_blank" rel="noreferrer">http://MANIFEST.in</a> 和新加入的pipfile，有时候即使对一个有经验的老手，也是有一些困难的。因此，我希望创建一种工具，只用一个文件就实现依赖管理、打包和发布。</p><p>通过前面的案例，我们已经提出了一些问题。但不止于此。</p><p>当您将依赖加入到<code>requirements.txt</code> 时，没有人帮你确定它是否与既存的依赖能够和平共处，这个过程要比我们想象的复杂许多，不仅仅是直接依赖，还需要考虑彼此的传递依赖是否也能彼此兼容；所以一般的做法是，先将它们加进来，完成开发和测试，在打包之前，运行 <code>pip freeze &gt; requirements.txt</code> 来锁定依赖库的版本。但我们也在前面的案例中提到，这种方法可能会将不必要的开发依赖打入到发行版中；此外，它也会过度锁定版本，从而使得一些活跃的第三方库失去自动更新热修复和安全更新的机会。</p><p>项目的版本管理也是一个问题。在老旧的Python项目中，一般我们使用bumpversion来管理版本，它需要使用三个文件。在我的日常使用时，它常常会出现各种问题，最常见的是单双引号导致把<code>__version__</code> =0.1当成一个版本号，而不是<code>0.1</code>。这样打出来的包名也会奇怪地多一个无意义的version字样。单双引号则是因为你的format工具对字符串常量应该使用什么样的引号规则有自己的意见。</p><p>项目进行打包和发布需要准备太多的文件，正如Poetry的开发者所说，要确保这些文件的内容完全正确，对一个有经验的开发者来说，也不是轻而易举的事；更重要的是，我们也决不应该在这方面花费太多的时间！</p><p>Poetry解决了所有这些问题（除了案例中的第一个，该问题要通过tox和CI来解决）。它提供了版本管理、依赖解析、构建和发布的一站式服务，并将所有的配置，集中到一个文件中，即pyproject.toml。此外，Poetry还提供了一个简单的工程创建向导。</p><h2 id="什么是poetry" tabindex="-1">什么是poetry? <a class="header-anchor" href="#什么是poetry" aria-label="Permalink to &quot;什么是poetry?&quot;">​</a></h2><p>Poetry 和 Pipenv 类似，是一个 Python 虚拟环境和依赖管理工具，另外它还提供了包管理功能，比如打包和发布。你可以把它看做是 Pipenv 和 Flit 这些工具的超集。它可以让你用 Poetry 来同时管理 Python 库和 Python 程序。</p><h3 id="方便在哪" tabindex="-1">方便在哪？ <a class="header-anchor" href="#方便在哪" aria-label="Permalink to &quot;方便在哪？&quot;">​</a></h3><h4 id="pip" tabindex="-1">pip <a class="header-anchor" href="#pip" aria-label="Permalink to &quot;pip&quot;">​</a></h4><p>pip比如说：我安装一个flask包会有很多依赖 但是如果我删除了flask包依赖没有被删除 这就是pip处理依赖的问题</p><h4 id="poetry" tabindex="-1">poetry <a class="header-anchor" href="#poetry" aria-label="Permalink to &quot;poetry&quot;">​</a></h4><p>然而poetry就完美解决了这个问题，依赖是不会写入<code>pyproject.toml</code>配置文件的 删除一个包会默认删除她的依赖</p><h2 id="安装poetry" tabindex="-1">安装poetry <a class="header-anchor" href="#安装poetry" aria-label="Permalink to &quot;安装poetry&quot;">​</a></h2><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">poetry</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">poetry</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="poetry-的基本用法" tabindex="-1">Poetry 的基本用法 <a class="header-anchor" href="#poetry-的基本用法" aria-label="Permalink to &quot;Poetry 的基本用法&quot;">​</a></h2><p>Poetry 的用法很简单，大部分命令和 Pipenv 接近。我们需要先了解一些基本概念和 Tips：</p><p>使用 PEP 518 引入的新标准 pyproject.toml 文件管理依赖列表和项目的各种 meta 信息，用来替代 Pipfile、requirements.txt、setup.py、setup.cfg、MANIFEST.in 等等各种配置文件。 依赖分为两种，普通依赖（生产环境）和开发依赖。 安装某个包，会在 pyproject.toml 文件中默认使用 upper bound（中文翻译？）版本限定，比如 Flask^1.1。这被叫做 Caret requirements（中文翻译？），比如某个依赖的版本限定是 ^2.9.0，当你执行 poetry update 的时候，它或许会更新到 2.14.0，但不会更新到 3.0.0；假如固定的版本是 ^0.1.11，它可能会更新到 0.1.19，但不会更新到 0.2.0。总之，在更新依赖的时候不会修改最左边非零的数字号版本（对于 SemVer 版本号而言），这样的默认设定可以确保你在更新依赖的时候不会更新到具有不兼容变动的版本。另外也支持更多依赖版本限定符号。 不会像 Pipenv 那样随时更新你的锁定依赖版本，锁定依赖存储在 poetry.lock 文件里（这个文件会自动生成）。所以，记得把你的 poetry.lock 文件纳入版本控制。 执行 poetry 或 poetry list 命令查看所有可用的命令。 如果你想了解更多进阶的内容，比如设置命令行补全、打包和发布等等，请阅读 <a href="https://python-poetry.org/docs/" target="_blank" rel="noreferrer">Poetry</a> 文档。</p><h3 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h3><p>如果你是在一个已有的项目里使用 Poetry，你只需要执行 <code>poetry init</code> 命令来创建一个 pyproject.toml 文件：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">poetry-demo</span></span>
<span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">poetry-demo</span></span>
<span class="line"><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">poetry-demo</span></span>
<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">poetry-demo</span></span>
<span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这时会在项目里创建一个文件<code>pyproject.toml</code></p><div class="language-toml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">tool</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">name = </span><span style="color:#9ECBFF;">&quot;poetry-demo&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">version = </span><span style="color:#9ECBFF;">&quot;0.1.0&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">description = </span><span style="color:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">authors = [</span><span style="color:#9ECBFF;">&quot;xxxxxx &lt;pyxxponly@gmail.com&gt;&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">readme = </span><span style="color:#9ECBFF;">&quot;README.md&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">packages = [{include = </span><span style="color:#9ECBFF;">&quot;poetry_demo&quot;</span><span style="color:#E1E4E8;">}]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">tool</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">dependencies</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">python = </span><span style="color:#9ECBFF;">&quot;^3.10&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">build-system</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">requires = [</span><span style="color:#9ECBFF;">&quot;poetry-core&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">build-backend = </span><span style="color:#9ECBFF;">&quot;poetry.core.masonry.api&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">name = </span><span style="color:#032F62;">&quot;poetry-demo&quot;</span></span>
<span class="line"><span style="color:#24292E;">version = </span><span style="color:#032F62;">&quot;0.1.0&quot;</span></span>
<span class="line"><span style="color:#24292E;">description = </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">authors = [</span><span style="color:#032F62;">&quot;xxxxxx &lt;pyxxponly@gmail.com&gt;&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">readme = </span><span style="color:#032F62;">&quot;README.md&quot;</span></span>
<span class="line"><span style="color:#24292E;">packages = [{include = </span><span style="color:#032F62;">&quot;poetry_demo&quot;</span><span style="color:#24292E;">}]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">dependencies</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">python = </span><span style="color:#032F62;">&quot;^3.10&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">build-system</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">requires = [</span><span style="color:#032F62;">&quot;poetry-core&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">build-backend = </span><span style="color:#032F62;">&quot;poetry.core.masonry.api&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="创建虚拟环境" tabindex="-1">创建虚拟环境 <a class="header-anchor" href="#创建虚拟环境" aria-label="Permalink to &quot;创建虚拟环境&quot;">​</a></h3><p>使用以下代码可以在项目里面创建一个虚拟环境，并产生一个文件夹<code>.venv</code> 这个文件夹与用<code>python -m venv venv</code>创建的是一样差不多的</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">env</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">python</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">env</span><span style="color:#24292E;"> </span><span style="color:#032F62;">use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="重点说明" tabindex="-1">重点说明 <a class="header-anchor" href="#重点说明" aria-label="Permalink to &quot;重点说明&quot;">​</a></h4><ul><li><code>poetry env use python</code> 是使用当前命令行下激活的 python 解释器创建虚拟环境 <ul><li>也可以将指令最后的 python ，改为 python3、python3.8，之类的，甚至只要需要 3.8，只要确保对于的解释器能够在环境变量中找到。</li><li>更多的配置可以查看 <a href="https://python-poetry.org/" target="_blank" rel="noreferrer">官方文档</a></li></ul></li><li>poetry 默认会将虚拟环境统一放在指定目录，例如刚刚创建的项目就放在 <code>C:\\Users\\xxp\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\</code> 目录当中</li><li>虚拟环境的命名模式为<code>项目名-随机数-python版本</code> 对于这种命名我个人是蛮喜欢的，每个项目有一个单独虚拟环境，并且制定了对应的版本，看一眼就能知道自己使用的环境是否正确。</li></ul><p>对于 poetry 将虚拟环境统一放在指定路径下，这一点我更偏向于 venv 的做法，也就是把虚拟环境放在项目目录下，方便用于观看依赖包的源码，在做项目部署的时候更方便一些。</p><p>所幸 poetry 提供了这样的选项。</p><p>在当前项目下创建虚拟环境 我们可以使用 poetry config --list 指令来查看 poetry 的几个主要设定，</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">X:\\poetry-demo&gt;poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--list</span></span>
<span class="line"><span style="color:#B392F0;">cache-dir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">xxp</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">AppData</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Local</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">pypoetry</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Cache&quot;</span></span>
<span class="line"><span style="color:#B392F0;">experimental.new-installer</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">experimental.system-git-client</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#B392F0;">installer.max-workers</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">null</span></span>
<span class="line"><span style="color:#B392F0;">installer.modern-installation</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">installer.no-binary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">null</span></span>
<span class="line"><span style="color:#B392F0;">installer.parallel</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">virtualenvs.create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">virtualenvs.in-project</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">null</span></span>
<span class="line"><span style="color:#B392F0;">virtualenvs.options.always-copy</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#B392F0;">virtualenvs.options.no-pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#B392F0;">virtualenvs.options.no-setuptools</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#B392F0;">virtualenvs.options.system-site-packages</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#B392F0;">virtualenvs.path</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;C:</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Users</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">xxp</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">AppData</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Local</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">pypoetry</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Cache</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">virtualenvs&quot;</span></span>
<span class="line"><span style="color:#B392F0;">virtualenvs.prefer-active-python</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#B392F0;">virtualenvs.prompt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{project_name}-py{python_version}&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">X:\\poetry-demo&gt;poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">config</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--list</span></span>
<span class="line"><span style="color:#6F42C1;">cache-dir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;C:</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">Users</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">xxp</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">AppData</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">Local</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">pypoetry</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">Cache&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">experimental.new-installer</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#6F42C1;">experimental.system-git-client</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#6F42C1;">installer.max-workers</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">null</span></span>
<span class="line"><span style="color:#6F42C1;">installer.modern-installation</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#6F42C1;">installer.no-binary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">null</span></span>
<span class="line"><span style="color:#6F42C1;">installer.parallel</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#6F42C1;">virtualenvs.create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#6F42C1;">virtualenvs.in-project</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">null</span></span>
<span class="line"><span style="color:#6F42C1;">virtualenvs.options.always-copy</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#6F42C1;">virtualenvs.options.no-pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#6F42C1;">virtualenvs.options.no-setuptools</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#6F42C1;">virtualenvs.options.system-site-packages</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#6F42C1;">virtualenvs.path</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;C:</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">Users</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">xxp</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">AppData</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">Local</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">pypoetry</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">Cache</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">virtualenvs&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">virtualenvs.prefer-active-python</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#6F42C1;">virtualenvs.prompt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{project_name}-py{python_version}&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>其中 <code>virtualenvs.create = true</code> 若改为 false，则可以停止 poetry 在检查不到虚拟环境是自动创建的行为模式，但是建议不要改动。</p><p>而 <code>virtualenvs.in-project = false</code> 就是我们要修改的目标，使用指令：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">virtualenvs.in-project</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">virtualenvs.in-project</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>先把之前创建的虚拟环境删除</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">X:\\poetry-demo&gt;poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">env</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">remove</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">python</span></span>
<span class="line"><span style="color:#B392F0;">Deleted</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">virtualenv:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">C:</span><span style="color:#79B8FF;">\\U</span><span style="color:#9ECBFF;">sers</span><span style="color:#79B8FF;">\\x</span><span style="color:#9ECBFF;">xp</span><span style="color:#79B8FF;">\\A</span><span style="color:#9ECBFF;">ppData</span><span style="color:#79B8FF;">\\L</span><span style="color:#9ECBFF;">ocal</span><span style="color:#79B8FF;">\\p</span><span style="color:#9ECBFF;">ypoetry</span><span style="color:#79B8FF;">\\C</span><span style="color:#9ECBFF;">ache</span><span style="color:#79B8FF;">\\v</span><span style="color:#9ECBFF;">irtualenvs</span><span style="color:#79B8FF;">\\p</span><span style="color:#9ECBFF;">oetry-demo-Ut74gzEx-py3.10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">X:\\poetry-demo&gt;poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">env</span><span style="color:#24292E;"> </span><span style="color:#032F62;">remove</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span></span>
<span class="line"><span style="color:#6F42C1;">Deleted</span><span style="color:#24292E;"> </span><span style="color:#032F62;">virtualenv:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">C:</span><span style="color:#005CC5;">\\U</span><span style="color:#032F62;">sers</span><span style="color:#005CC5;">\\x</span><span style="color:#032F62;">xp</span><span style="color:#005CC5;">\\A</span><span style="color:#032F62;">ppData</span><span style="color:#005CC5;">\\L</span><span style="color:#032F62;">ocal</span><span style="color:#005CC5;">\\p</span><span style="color:#032F62;">ypoetry</span><span style="color:#005CC5;">\\C</span><span style="color:#032F62;">ache</span><span style="color:#005CC5;">\\v</span><span style="color:#032F62;">irtualenvs</span><span style="color:#005CC5;">\\p</span><span style="color:#032F62;">oetry-demo-Ut74gzEx-py3.10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>重新创建虚拟环境，看一下差异：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">X:\\poetry-demo&gt;poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">env</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">python</span></span>
<span class="line"><span style="color:#B392F0;">Creating</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">virtualenv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">poetry-demo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">X:</span><span style="color:#79B8FF;">\\p</span><span style="color:#9ECBFF;">oetry-demo</span><span style="color:#79B8FF;">\\.</span><span style="color:#9ECBFF;">venv</span></span>
<span class="line"><span style="color:#B392F0;">Using</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">virtualenv:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">X:</span><span style="color:#79B8FF;">\\p</span><span style="color:#9ECBFF;">oetry-demo</span><span style="color:#79B8FF;">\\.</span><span style="color:#9ECBFF;">venv</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">X:\\poetry-demo&gt;poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">env</span><span style="color:#24292E;"> </span><span style="color:#032F62;">use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span></span>
<span class="line"><span style="color:#6F42C1;">Creating</span><span style="color:#24292E;"> </span><span style="color:#032F62;">virtualenv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">poetry-demo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">X:</span><span style="color:#005CC5;">\\p</span><span style="color:#032F62;">oetry-demo</span><span style="color:#005CC5;">\\.</span><span style="color:#032F62;">venv</span></span>
<span class="line"><span style="color:#6F42C1;">Using</span><span style="color:#24292E;"> </span><span style="color:#032F62;">virtualenv:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">X:</span><span style="color:#005CC5;">\\p</span><span style="color:#032F62;">oetry-demo</span><span style="color:#005CC5;">\\.</span><span style="color:#032F62;">venv</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以看出：</p><p>虚拟环境的路径改为项目的根目录下了 名称固定位 <code>.venv</code> 个人觉得这样的设定更加简洁。</p><h3 id="激活虚拟环境" tabindex="-1">激活虚拟环境 <a class="header-anchor" href="#激活虚拟环境" aria-label="Permalink to &quot;激活虚拟环境&quot;">​</a></h3><p>如果你想显式的激活虚拟环境，使用<code>poetry shell</code>命令：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">X:\\poetry-demo&gt;poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">shell</span></span>
<span class="line"><span style="color:#B392F0;">Spawning</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">shell</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">within</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">X:</span><span style="color:#79B8FF;">\\p</span><span style="color:#9ECBFF;">oetry-demo</span><span style="color:#79B8FF;">\\.</span><span style="color:#9ECBFF;">venv</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">poetry-demo-py3.10</span><span style="color:#E1E4E8;">) X:</span><span style="color:#79B8FF;">\\p</span><span style="color:#E1E4E8;">oetry-demo</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">X:\\poetry-demo&gt;poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">shell</span></span>
<span class="line"><span style="color:#6F42C1;">Spawning</span><span style="color:#24292E;"> </span><span style="color:#032F62;">shell</span><span style="color:#24292E;"> </span><span style="color:#032F62;">within</span><span style="color:#24292E;"> </span><span style="color:#032F62;">X:</span><span style="color:#005CC5;">\\p</span><span style="color:#032F62;">oetry-demo</span><span style="color:#005CC5;">\\.</span><span style="color:#032F62;">venv</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">poetry-demo-py3.10</span><span style="color:#24292E;">) X:</span><span style="color:#005CC5;">\\p</span><span style="color:#24292E;">oetry-demo</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这样你就能进入poetry虚拟环境了</p><p>如果想退出直接在命令行里输入<code>exit</code>就可以退出</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">poetry-demo-py3.10</span><span style="color:#E1E4E8;">) X:</span><span style="color:#79B8FF;">\\p</span><span style="color:#E1E4E8;">oetry-demo</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">exit</span></span>
<span class="line"><span style="color:#B392F0;">X:\\poetry-demo&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">poetry-demo-py3.10</span><span style="color:#24292E;">) X:</span><span style="color:#005CC5;">\\p</span><span style="color:#24292E;">oetry-demo</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">exit</span></span>
<span class="line"><span style="color:#6F42C1;">X:\\poetry-demo&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="poetry指令的使用" tabindex="-1">Poetry指令的使用 <a class="header-anchor" href="#poetry指令的使用" aria-label="Permalink to &quot;Poetry指令的使用&quot;">​</a></h2><h3 id="安装包" tabindex="-1">安装包 <a class="header-anchor" href="#安装包" aria-label="Permalink to &quot;安装包&quot;">​</a></h3><p>使用 <code>poetry add</code> 命令来安装一个包：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">flask</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">flask</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>添加 <code>--dev</code> 参数可以指定为开发依赖：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>注意：安装的包和模块的开发依赖不写入<code>pyproject.toml</code></p><h3 id="追踪-更新包" tabindex="-1">追踪 &amp; 更新包 <a class="header-anchor" href="#追踪-更新包" aria-label="Permalink to &quot;追踪 &amp; 更新包&quot;">​</a></h3><p>使用 <code>poetry show</code> 命令可以查看所有安装的依赖（可以传递包名称作为参数查看具体某个包的信息）：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">show</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">show</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>添加 <code>--tree</code> 选项可以查看依赖关系：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">show</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--tree</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">show</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--tree</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>添加 <code>--outdated</code> 可以查看可以更新的依赖：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">show</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--outdated</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">show</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--outdated</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行 <code>poetry update</code> 命令可以更新所有锁定版本的依赖：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">update</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">update</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果你想更新某个指定的依赖，传递包名作为参数：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">update</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">update</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="卸载包" tabindex="-1">卸载包 <a class="header-anchor" href="#卸载包" aria-label="Permalink to &quot;卸载包&quot;">​</a></h3><p>使用 <code>poetry remove &lt;包名称&gt;</code> 卸载一个包：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">remove</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">remove</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>当你从gitee、github上下载一个仓库使用的是poetry管理的包，里面没有虚拟环境 这时我们就不能使用<code>poetry env use python</code>创建虚拟环境了， 我们需要在命令行里输入<code>poetry install</code>来进行创建虚拟环境，<strong>并自动安装依赖包</strong></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 就会把所有在pyproject.toml上的所有包都下载下来并创建虚拟环境</span></span>
<span class="line"><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 就会把所有在pyproject.toml上的所有包都下载下来并创建虚拟环境</span></span>
<span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>下面紧接着就可以运行代码了！</p><h2 id="更多" tabindex="-1">更多 <a class="header-anchor" href="#更多" aria-label="Permalink to &quot;更多&quot;">​</a></h2><p>更多的用法可以详细查看：<a href="https://muzing.top/posts/3fa905f9/" target="_blank" rel="noreferrer">使用 Python Poetry 进行依赖项管理（翻译）</a></p>`,74);function E(a,d,F,u,h,C){return p(),l("div",null,[s("h1",c,[e(o(a.$frontmatter.title)+" ",1),y]),i])}const m=n(r,[["render",E]]);export{v as __pageData,m as default};
