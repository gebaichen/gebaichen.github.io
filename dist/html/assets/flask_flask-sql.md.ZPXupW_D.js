import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.b6PMUn9J.js";const b=JSON.parse('{"title":"Flask操作mysql数据库","description":"Flask-sqlalchemy实现ORM操作数据库;Flask-Migrate实现数据库迁移","frontmatter":{"date":"2023.8.30","title":"Flask操作mysql数据库","tags":["flask","flask-sqlalchemy","flask-migrate","python","web","flask插件"],"description":"Flask-sqlalchemy实现ORM操作数据库;Flask-Migrate实现数据库迁移","link":"/flask/flask-sql.html"},"headers":[],"relativePath":"flask/flask-sql.md","filePath":"flask/flask-sql.md","lastUpdated":1700227085000}'),p={name:"flask/flask-sql.md"},e=l(`<h1 id="flask操作mysql数据库" tabindex="-1">Flask操作mysql数据库 <a class="header-anchor" href="#flask操作mysql数据库" aria-label="Permalink to &quot;Flask操作mysql数据库&quot;">​</a></h1><p>操作sql数据库在py中，一般使用pymysql 但是因为使用pymysql时要使用sql语言，就会变的如此的麻烦，而且不好理解</p><p>这时py有一个包sqlalchemy出现了，他比较像django内置的ORM，用类去封装一个表格，用ORM 方式操作数据库显的特别简单，易学，好上手，对开发者比较友好</p><h2 id="orm-sql" tabindex="-1">ORM &amp; SQL <a class="header-anchor" href="#orm-sql" aria-label="Permalink to &quot;ORM &amp; SQL&quot;">​</a></h2><p>在 Web 应用里使用原生 SQL（一种特殊目的的编程语言，一种数据库查询和程序设计语言） 语句操作数据库主要存在下面两类问题：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ol><li>手动编写 SQL 语句比较乏味，而且视图函数中加入太多 SQL 语句会降低代码的易读性。另外还会容易出现安全问题，比如 SQL 注入。</li><li>常见的开发模式是在开发时使用简单的 SQLite，而在部署时切换到 MySQL 等更健壮的 DBMS（数据库管理系统）。但是对于不同的 DBMS，我们需要使用不同的 Python 接口库，这让 DBMS 的切换变得不太容易。</li><li>使用 ORM 可以避免 SQL 注入问题，但你仍然需要对传入的查询参数进行验证。在执行原生 SQL 语句时也要注意避免使用字符串拼接 或字符串格式化的方式传入参数。</li></ol></div><p>使用 ORM（对象关系映射） 可以很大程度上解决这些问题。它会自动帮你处理查询参数的转义，尽可能地避免 SQL 注入的发生。另外，它为不同的 DBMS 提供统 一的接口，让切换工作变得非常简单。ORM 扮演翻译的角色，能够将我们 的Python语言转换为 DBMS 能够读懂的 SQL 指令，让我们能够使用Python来操控数据库。</p><p>尽管ORM非常方便，但是自己编写 SQL 代码可以获得更大的灵活性和性能优势。就像是使用IDE一样，ORM 对初学者来说非常方便，但进阶以后你也许会想要自己掌控一切。</p><p>ORM 把底层的 SQL 数据实体转化成高层的 Python 对象，这样一来，你甚至不需要了解 SQL，只需要通过 Python 代码即可完成数据库操作，ORM 主要实现了三层映射关系：</p><ul><li>数据表 --&gt; py类。</li><li>字段 --&gt; py类属性。</li><li>内容 --&gt; py类实例。</li></ul><h2 id="flask-sqlalchemy" tabindex="-1">Flask-Sqlalchemy <a class="header-anchor" href="#flask-sqlalchemy" aria-label="Permalink to &quot;Flask-Sqlalchemy&quot;">​</a></h2><p>Flask-SQLAlchemy 通过自动处理创建、使用和清理您通常使用的 SQLAlchemy 对象来简化 SQLAlchemy 的使用。虽然它添加了一些有用的功能，但它仍然像SQLAlchemy一样工作。</p><blockquote><p><a href="https://flask-sqlalchemy.palletsprojects.com/en/3.0.x/" target="_blank" rel="noreferrer">https://flask-sqlalchemy.palletsprojects.com/en/3.0.x/</a></p></blockquote><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-5qY1K" id="tab-wuXH1eJ" checked="checked"><label for="tab-wuXH1eJ">pip</label><input type="radio" name="group-5qY1K" id="tab-I8RQRqb"><label for="tab-I8RQRqb">poetry</label></div><div class="blocks"><div class="language-shell vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Flask-Sqlalchemy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Flask-Sqlalchemy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Flask-Sqlalchemy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Flask-Sqlalchemy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><h3 id="注册到app" tabindex="-1">注册到app <a class="header-anchor" href="#注册到app" aria-label="Permalink to &quot;注册到app&quot;">​</a></h3><p>把flask-sqlalchemy拓展插件注册到flask app中</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Flask</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask_sqlalchemy </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> SQLAlchemy</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># create the extension</span></span>
<span class="line"><span style="color:#E1E4E8;">db </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SQLAlchemy()</span></span>
<span class="line"><span style="color:#6A737D;"># create the app</span></span>
<span class="line"><span style="color:#E1E4E8;">app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flask(</span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;"># configure the SQLite database, relative to the app instance folder</span></span>
<span class="line"><span style="color:#E1E4E8;">app.config[</span><span style="color:#9ECBFF;">&quot;SQLALCHEMY_DATABASE_URI&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;sqlite:///project.db&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># initialize the app with the extension</span></span>
<span class="line"><span style="color:#E1E4E8;">db.init_app(app)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Flask</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask_sqlalchemy </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> SQLAlchemy</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># create the extension</span></span>
<span class="line"><span style="color:#24292E;">db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SQLAlchemy()</span></span>
<span class="line"><span style="color:#6A737D;"># create the app</span></span>
<span class="line"><span style="color:#24292E;">app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flask(</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;"># configure the SQLite database, relative to the app instance folder</span></span>
<span class="line"><span style="color:#24292E;">app.config[</span><span style="color:#032F62;">&quot;SQLALCHEMY_DATABASE_URI&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;sqlite:///project.db&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># initialize the app with the extension</span></span>
<span class="line"><span style="color:#24292E;">db.init_app(app)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>此上代码是最简单的注册方法</p><h4 id="注" tabindex="-1">注 <a class="header-anchor" href="#注" aria-label="Permalink to &quot;注&quot;">​</a></h4><p>该 db 对象允许您访问用于定义模型的类以及 <strong>db.Model</strong> 用于执行查询的 <strong>db.session</strong> 类</p><p>有关连接字符串的说明以及使用的其他配置键的说明，请参阅配置。该 <strong>SQLAlchemy</strong> 对象还需要一些参数来自定义它管理的对象。</p><h3 id="增-定义数据库模型" tabindex="-1">增-定义数据库模型 <a class="header-anchor" href="#增-定义数据库模型" aria-label="Permalink to &quot;增-定义数据库模型&quot;">​</a></h3><p>用于定义模型类的子类 <strong>db.Model</strong> 。为方便起见，该 db 对象使名称在 中 sqlalchemy <strong>sqlalchemy.orm</strong> 可用，例如 <strong>db.Column</strong> 。该模型将通过将 CamelCase 类名转换为 snake_case 来生成表名。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">db</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.Column(db.Integer, </span><span style="color:#FFAB70;">primary_key</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.Column(db.String, </span><span style="color:#FFAB70;">unique</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">nullable</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    email </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.Column(db.String)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">db</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.Column(db.Integer, </span><span style="color:#E36209;">primary_key</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.Column(db.String, </span><span style="color:#E36209;">unique</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">nullable</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    email </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.Column(db.String)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>表名与类名相互保持一致</p><blockquote><p>常用字段说明</p></blockquote><table><thead><tr><th style="text-align:left;">字 段</th><th>说 明</th></tr></thead><tbody><tr><td style="text-align:left;">Integer</td><td>整数</td></tr><tr><td style="text-align:left;">String</td><td>字符串，可选参数length可以用来设置最大长度</td></tr><tr><td style="text-align:left;">Text</td><td>较长的Unicode文本</td></tr><tr><td style="text-align:left;">Date</td><td>日期，存储Python的datetime.date对象</td></tr><tr><td style="text-align:left;">Time</td><td>时间，存储Python的datetime.time对象</td></tr><tr><td style="text-align:left;">DateTime</td><td>时间和日期，存储Python的datetime对象</td></tr><tr><td style="text-align:left;">Interval</td><td>时间间隔，存储Python的datetime.timedelta对象</td></tr><tr><td style="text-align:left;">Float</td><td>浮点数</td></tr><tr><td style="text-align:left;">Boolean</td><td>布尔值</td></tr><tr><td style="text-align:left;">PickleType</td><td>存储Pickle列化的Python对象</td></tr><tr><td style="text-align:left;">LargeBinary</td><td>存储任意二进制数据</td></tr></tbody></table><h4 id="创建表" tabindex="-1">创建表 <a class="header-anchor" href="#创建表" aria-label="Permalink to &quot;创建表&quot;">​</a></h4><p>定义所有模型和表后，调用 <s>SQLAlchemy.create_all()</s>（并不推荐此用法） 以在数据库中创建表架构。这需要应用程序上下文。由于此时您不在请求中，因此请手动创建一个。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> app.app_context():</span></span>
<span class="line"><span style="color:#E1E4E8;">    db.create_all()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> app.app_context():</span></span>
<span class="line"><span style="color:#24292E;">    db.create_all()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>但是这么创建并不方便，创建表我们用flask-migrate这个包实行数据迁移来进项添加表</p><h3 id="删-查-改" tabindex="-1">删-查-改 <a class="header-anchor" href="#删-查-改" aria-label="Permalink to &quot;删-查-改&quot;">​</a></h3><p>在 Flask 视图或 CLI 命令中，您可以使用 执行 db.session 查询和修改模型数据。</p><ul><li><code>db.session.add(obj)</code> 将对象添加到要插入的会话中。修改对象的属性会更新该对象 。</li><li><code>db.session.delete(obj)</code> 删除对象。</li><li>请记住在修改、添加或删除任何数据后调用 <code>db.session.commit()</code> 。</li><li><code>db.session.execute(db.select(...))</code> 构造一个查询以从数据库中选择数。 构建查询是 SQLAlchemy 的主要功能，因此您需要阅读其教程 select 以了解有关它的所有信息。 通常使用该方法获取结果列表，或使用 <code>Result.scalars()</code> <code>Result.scalar()</code> 该方法获取单个结果。</li></ul><p>您可能会看到用于 Model.query 构建查询的用法。这是一个较旧的查询接口，在 SQLAlchemy 中被视为遗留接口。更建议使用 <code>db.session.execute(db.select(...))</code> 。</p><p>例子：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">user_list</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    q </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.select(User) </span><span style="color:#6A737D;"># 用q变量定义一个查找对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    q </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> q.order_by(User.username) </span><span style="color:#6A737D;"># 用赋值方式来写查找逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.session.execute(q).scalars() </span><span style="color:#6A737D;"># 用db.session.execute()执行q定义的查询对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&quot;user/list.html&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">users</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">users)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">user_list</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.select(User) </span><span style="color:#6A737D;"># 用q变量定义一个查找对象</span></span>
<span class="line"><span style="color:#24292E;">    q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> q.order_by(User.username) </span><span style="color:#6A737D;"># 用赋值方式来写查找逻辑</span></span>
<span class="line"><span style="color:#24292E;">    users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.session.execute(q).scalars() </span><span style="color:#6A737D;"># 用db.session.execute()执行q定义的查询对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&quot;user/list.html&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">users</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">users)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>注：还可以用query进行查询，大多使用query，因为<code>db.session.execute(db.select(...))</code>刚更新刚发布</p></blockquote><h4 id="查询指南" tabindex="-1">查询指南 <a class="header-anchor" href="#查询指南" aria-label="Permalink to &quot;查询指南&quot;">​</a></h4><p>我们已经知道了如何向数据库里添加记录，那么如何从数据库里取回 数据呢？使用模型类提供的query属性附加调用各种过滤方法及查询方法可 以完成这个任务。</p><p>一般来说，一个完整的查询遵循下面的模式：</p><p>也可以用query来查询，</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">模型类</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">.query.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">过滤方法</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">查询方法</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">模型类</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">.query.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">过滤方法</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">查询方法</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>从某个模型类出发，通过在query属性对应的Query对象上附加的过滤 方法和查询函数对模型类对应的表中的记录进行各种筛选和调整，最终返 回包含对应数据库记录数据的模型类实例，对返回的实例调用属性即可获 取对应的字段数据。</p><p>如果你执行了上面⼩节里的操作，我们的数据库现在一共会有三条记录</p><table><thead><tr><th>id</th><th>name</th><th>math</th><th>chinese</th><th>english</th></tr></thead><tbody><tr><td>1</td><td>Mark</td><td>100</td><td>68</td><td>60</td></tr><tr><td>2</td><td>Alan</td><td>15</td><td>67</td><td>65</td></tr><tr><td>3</td><td>Christ</td><td>0</td><td>70</td><td>70</td></tr><tr><td>4</td><td>Quqi</td><td>100</td><td>100</td><td>100</td></tr></tbody></table><p>SQLAlchemy提供了许多查询方法用来获取记录</p><blockquote><p>常用的SQLAlchemy查询方法</p></blockquote><table><thead><tr><th>查询方法（触发器）</th><th>说 明</th></tr></thead><tbody><tr><td>all()</td><td>返回包含所有查询记录的列表</td></tr><tr><td>first()</td><td>返回查询的第一条记录，如果未找到，则返回None</td></tr><tr><td>one()</td><td>返回第一条记录，旦仅允许有一条记录。如果记录数量大于1或小于1，则拋出错误</td></tr><tr><td>get(ident)</td><td>传入主键值作为参数，返回指定主键值的记录，如果未找到，则返回None</td></tr><tr><td>count()</td><td>返回查询结果的数量</td></tr><tr><td>one_or_none()</td><td>类似one()，如果结果数量不为1，返回None</td></tr><tr><td>first_or_404()</td><td>返回查询的第一条记录，如果未找到，则返回404错误响应</td></tr><tr><td>get_or_404(ident)</td><td>传人主键值作为参数，返回指定主键值的记录，如果未找到，则返回404错误响应</td></tr><tr><td>paginate()</td><td>返回一个Pagination对象，可以对记录进行分页处理</td></tr><tr><td>with_parent( instance)</td><td>传人模型类实例作为参数，返回和这个实例相关联的对象，后面会详细介绍</td></tr></tbody></table><p>first_or_404()、get_or_404() 以及 paginate() 方法是 Flask-SQLAlchemy 附加的查询方法。</p><p>下面是对 Note 类进行查询的几个示例。all() 返回所有记录：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> Students.query.all()</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Students Mark</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Students Alan</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Students Christ</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Students Quqi</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> Students.query.all()</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Students Mark</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Students Alan</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Students Christ</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Students Quqi</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>first() 返回第一条记录：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> Students.query.first()</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Students Mark</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> Students.query.first()</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Students Mark</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>get() 返回指定主键值（id字段）的记录：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> stu2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Students.query.get(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> stu2 </span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Students Alan</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> stu2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Students.query.get(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> stu2 </span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Students Alan</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>count()返回记录的数量：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> Students.query.count() </span></span>
<span class="line"><span style="color:#79B8FF;">4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> Students.query.count() </span></span>
<span class="line"><span style="color:#005CC5;">4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>SQLAlchemy还提供了许多过滤方法，使用这些过滤方法可以获取更 精确的查询，比如获取指定字段值的记录。对模型类的query属性存储的 Query对象调用过滤方法将返回一个更精确的Query对象（后面我们简称为 查询对象）。因为每个过滤方法都会返回新的查询对象，所以过滤器可以 叠加使用。在查询对象上调用前面介绍的查询方法，即可获得一个包含过 滤后的记录的列表。</p><p>所有的的查询方法和过滤方法列表 在<a href="http://docs.sqlalchemy.org/en/latest/orm/query.html" target="_blank" rel="noreferrer">http://docs.sqlalchemy.org/en/latest/orm/query.html</a> 可以看到</p><p>查询过滤器可以<strong>链式调用</strong>实现多重查询，使查询结果进一步完善</p><table><thead><tr><th>查询过滤器</th><th>说 明</th></tr></thead><tbody><tr><td>filter_by()</td><td>使用指定规则过滤记录（以关键字表达式的形式），返回新产生的查洵对象</td></tr><tr><td>filter()</td><td>使用指定的规则过滤记录，返回新产生的查询对象</td></tr><tr><td>order_by()</td><td>根据指定条件对记录进行排序，返回新产生的查询对象</td></tr><tr><td>limit(limit)</td><td>使用指定的值限制原查询返回的记录数量，返回新产生的查询对象</td></tr><tr><td>group_by()</td><td>根据指定条件对记录进行分组，返回新产生的查询对象</td></tr><tr><td>offset(offset)</td><td>使用指定的值偏移原查询的结果，返回新产生的查询对象</td></tr></tbody></table><p>filter()方法是最基础的查询方法。它使用指定的规则来过滤记录， 下面的示例在数据库里找出了body字段值为“SHAVE”的记录：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> Students.query.filter(Students.name </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Mark&#39;</span><span style="color:#E1E4E8;">).first()</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Students Mark</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> Students.query.filter(Students.name </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Mark&#39;</span><span style="color:#24292E;">).first()</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Students Mark</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>直接打印查询对象或将其转换为字符串可以查看对应的SQL语句：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> Students.query.filter(Students.name </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Mark&#39;</span><span style="color:#E1E4E8;">).first()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">SELECT</span><span style="color:#E1E4E8;"> students.id </span><span style="color:#79B8FF;">AS</span><span style="color:#E1E4E8;"> students_id, students.name </span><span style="color:#79B8FF;">AS</span><span style="color:#E1E4E8;"> students_name, students.math </span><span style="color:#79B8FF;">AS</span><span style="color:#E1E4E8;"> students_math, students.chinese </span><span style="color:#79B8FF;">AS</span><span style="color:#E1E4E8;"> students_chinese, students.english </span><span style="color:#79B8FF;">AS</span><span style="color:#E1E4E8;"> students_english </span></span>
<span class="line"><span style="color:#79B8FF;">FROM</span><span style="color:#E1E4E8;"> students </span></span>
<span class="line"><span style="color:#79B8FF;">WHERE</span><span style="color:#E1E4E8;"> students.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">?</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">LIMIT</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">OFFSET</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> Students.query.filter(Students.name </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Mark&#39;</span><span style="color:#24292E;">).first()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">SELECT</span><span style="color:#24292E;"> students.id </span><span style="color:#005CC5;">AS</span><span style="color:#24292E;"> students_id, students.name </span><span style="color:#005CC5;">AS</span><span style="color:#24292E;"> students_name, students.math </span><span style="color:#005CC5;">AS</span><span style="color:#24292E;"> students_math, students.chinese </span><span style="color:#005CC5;">AS</span><span style="color:#24292E;"> students_chinese, students.english </span><span style="color:#005CC5;">AS</span><span style="color:#24292E;"> students_english </span></span>
<span class="line"><span style="color:#005CC5;">FROM</span><span style="color:#24292E;"> students </span></span>
<span class="line"><span style="color:#005CC5;">WHERE</span><span style="color:#24292E;"> students.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">?</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">LIMIT</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">OFFSET</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">?</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在filter()方法中传入表达式时，除了“==”以及表示不等于的“!=”， 其他常用的查询操作符以及使用示例如下所示：</p><p>LIKE：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">filter</span><span style="color:#E1E4E8;">(Students.name.like(</span><span style="color:#9ECBFF;">&#39;%Ma%&#39;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">filter</span><span style="color:#24292E;">(Students.name.like(</span><span style="color:#032F62;">&#39;%Ma%&#39;</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>IN：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">filter</span><span style="color:#E1E4E8;">(Students.name.in_([</span><span style="color:#9ECBFF;">&#39;Mark&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Christ&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">filter</span><span style="color:#24292E;">(Students.name.in_([</span><span style="color:#032F62;">&#39;Mark&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Christ&#39;</span><span style="color:#24292E;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>NOT IN：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.filter(</span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">Students.name.in_([</span><span style="color:#9ECBFF;">&#39;Alan&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Quqi&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.filter(</span><span style="color:#D73A49;">~</span><span style="color:#24292E;">Students.name.in_([</span><span style="color:#032F62;">&#39;Alan&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Quqi&#39;</span><span style="color:#24292E;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>AND：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> sqlalchemy </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> and_</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">filter</span><span style="color:#E1E4E8;">(and_(Students.name </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Quqi&#39;</span><span style="color:#E1E4E8;">, Students.chinese </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 或在filter()中加入多个表达式，使用逗号分隔</span></span>
<span class="line"><span style="color:#79B8FF;">filter</span><span style="color:#E1E4E8;">(Students.name </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Quqi&#39;</span><span style="color:#E1E4E8;">, Students.chinese </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 或叠加调用多个 filte()/ filte_by() 方法 </span></span>
<span class="line"><span style="color:#79B8FF;">filter</span><span style="color:#E1E4E8;">(Students.name </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Quqi&#39;</span><span style="color:#E1E4E8;">).filter(Students.chinese </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sqlalchemy </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> and_</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">filter</span><span style="color:#24292E;">(and_(Students.name </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Quqi&#39;</span><span style="color:#24292E;">, Students.chinese </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 或在filter()中加入多个表达式，使用逗号分隔</span></span>
<span class="line"><span style="color:#005CC5;">filter</span><span style="color:#24292E;">(Students.name </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Quqi&#39;</span><span style="color:#24292E;">, Students.chinese </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 或叠加调用多个 filte()/ filte_by() 方法 </span></span>
<span class="line"><span style="color:#005CC5;">filter</span><span style="color:#24292E;">(Students.name </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Quqi&#39;</span><span style="color:#24292E;">).filter(Students.chinese </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>OR：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> sqlalchemy </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> or_</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(Students.query.filter(or_(Students.name </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Quqi&#39;</span><span style="color:#E1E4E8;">, Students.chinese </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">)).all())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sqlalchemy </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> or_</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(Students.query.filter(or_(Students.name </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Quqi&#39;</span><span style="color:#24292E;">, Students.chinese </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">)).all())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>(完整的可用操作符列表)[<a href="http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.operator" target="_blank" rel="noreferrer">http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.operator</a>]</p><p>和filter()方法相比，filter_by()方法更易于使用。在filter_by() 方法中，你可以使用关键字表达式来指定过滤规则。更方便的是，你可以 在这个过滤器中直接使用字段名称。下面的示例使用filter_by()过滤器完 成了同样的任务：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(Students.query.filter_by(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;Quqi&#39;</span><span style="color:#E1E4E8;">).all())</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Students Quqi</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(Students.query.filter(name</span><span style="color:#F97583;">==</span><span style="color:#9ECBFF;">&#39;Quqi&#39;</span><span style="color:#E1E4E8;">).all())</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Students Quqi</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(Students.query.filter_by(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;Quqi&#39;</span><span style="color:#24292E;">).all())</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Students Quqi</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(Students.query.filter(name</span><span style="color:#D73A49;">==</span><span style="color:#032F62;">&#39;Quqi&#39;</span><span style="color:#24292E;">).all())</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Students Quqi</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>filter &amp; filter_by传入的分别是filter传入的是表达式，filter_by传入的是&lt;参数名称&gt;=&lt;查询内容&gt;</p><h4 id="新方法查询" tabindex="-1">新方法查询 <a class="header-anchor" href="#新方法查询" aria-label="Permalink to &quot;新方法查询&quot;">​</a></h4><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">user_list</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    q </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.select(User) </span><span style="color:#6A737D;"># 1.用q变量定义一个查找对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    q </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> q.order_by(User.username) </span><span style="color:#6A737D;"># 2.用赋值方式来写查找逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.session.execute(q).scalars() </span><span style="color:#6A737D;"># 3.用db.session.execute()执行q定义的查询对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&quot;user/list.html&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">users</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">users)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">user_list</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.select(User) </span><span style="color:#6A737D;"># 1.用q变量定义一个查找对象</span></span>
<span class="line"><span style="color:#24292E;">    q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> q.order_by(User.username) </span><span style="color:#6A737D;"># 2.用赋值方式来写查找逻辑</span></span>
<span class="line"><span style="color:#24292E;">    users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.session.execute(q).scalars() </span><span style="color:#6A737D;"># 3.用db.session.execute()执行q定义的查询对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&quot;user/list.html&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">users</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">users)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>查询逻辑：</p><table><thead><tr><th>查询过滤器</th><th>说 明</th></tr></thead><tbody><tr><td>where()</td><td>使用指定的规则过滤记录，返回新产生的查询对象</td></tr><tr><td>order_by()</td><td>根据指定条件对记录进行排序，返回新产生的查询对象</td></tr><tr><td>limit(limit)</td><td>使用指定的值限制原查询返回的记录数量，返回新产生的查询对象</td></tr></tbody></table><p>可以多次进行赋值，进行编写逻辑</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">user_list</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    q </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.select(User) </span><span style="color:#6A737D;"># 1.用q变量定义一个查找对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    q </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> q.order_by(User.username) </span><span style="color:#6A737D;"># 2.1用赋值方式来写查找逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    q </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> q.where(User.username </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;"># 2.2用赋值方式来写查找逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.session.execute(q).scalars() </span><span style="color:#6A737D;"># 3.用db.session.execute()执行q定义的查询对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&quot;user/list.html&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">users</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">users)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">user_list</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.select(User) </span><span style="color:#6A737D;"># 1.用q变量定义一个查找对象</span></span>
<span class="line"><span style="color:#24292E;">    q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> q.order_by(User.username) </span><span style="color:#6A737D;"># 2.1用赋值方式来写查找逻辑</span></span>
<span class="line"><span style="color:#24292E;">    q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> q.where(User.username </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">) </span><span style="color:#6A737D;"># 2.2用赋值方式来写查找逻辑</span></span>
<span class="line"><span style="color:#24292E;">    users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.session.execute(q).scalars() </span><span style="color:#6A737D;"># 3.用db.session.execute()执行q定义的查询对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&quot;user/list.html&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">users</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">users)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="分页查询" tabindex="-1">分页查询 <a class="header-anchor" href="#分页查询" aria-label="Permalink to &quot;分页查询&quot;">​</a></h3><h4 id="查询参数" tabindex="-1">查询参数 <a class="header-anchor" href="#查询参数" aria-label="Permalink to &quot;查询参数&quot;">​</a></h4><table><thead><tr><th>参数名称</th><th>参数作用</th></tr></thead><tbody><tr><td>page</td><td>查询的页数</td></tr><tr><td>per_page</td><td>每页的条数</td></tr><tr><td>max_per_page</td><td>每页最大条数，有值时，per_page 受它影响</td></tr><tr><td>error_out</td><td>当值为 True 时，下列情况会报错当 page 为 1 时，找不到任何数据page 小于 1，或者 per_page 为负数page 或 per_page 不是整数</td></tr></tbody></table><p>该方法返回一个分页对象 Pagination</p><h4 id="查询字段-实例化分页的属性" tabindex="-1">查询字段（实例化分页的属性） <a class="header-anchor" href="#查询字段-实例化分页的属性" aria-label="Permalink to &quot;查询字段（实例化分页的属性）&quot;">​</a></h4><table><thead><tr><th>字段名称</th><th>字段作用</th></tr></thead><tbody><tr><td>items</td><td>当前页的数据列表</td></tr><tr><td>page</td><td>当前页码</td></tr><tr><td>pages</td><td>总页数</td></tr><tr><td>total</td><td>总条数</td></tr><tr><td>per_page</td><td>每页的条数</td></tr><tr><td>has_next</td><td>如果下一页存在，返回 True</td></tr><tr><td>has_prev</td><td>如果上一页存在，返回 True</td></tr><tr><td>next_num</td><td>下一页的页码</td></tr><tr><td>prev_num</td><td>上一页的页码</td></tr><tr><td>query</td><td>用于创建此分页对象的无限查询对象。</td></tr><tr><td>iter_pages(left_edge=2, left_current=2, right_current=5, right_edge=2)</td><td>迭代分页中的页码，四个参数 ，分别控制了省略号左右两侧各显示多少页码 ，在模板中可以这样渲染</td></tr></tbody></table><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-XZ1jJ" id="tab-W6TrkBx" checked="checked"><label for="tab-W6TrkBx">老方式查询query</label><input type="radio" name="group-XZ1jJ" id="tab-dfr5vo9"><label for="tab-dfr5vo9">新方式查询</label></div><div class="blocks"><div class="language-python vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">page </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.query.order_by(User.join_date).paginate(</span><span style="color:#FFAB70;">page</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">page, </span><span style="color:#FFAB70;">pre_page</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">pre_page)</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&quot;user/list.html&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">page</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">page)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">page </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.query.order_by(User.join_date).paginate(</span><span style="color:#E36209;">page</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">page, </span><span style="color:#E36209;">pre_page</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">pre_page)</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&quot;user/list.html&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">page</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">page)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">q </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.select(User)</span></span>
<span class="line"><span style="color:#E1E4E8;">q </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> q.order_by(User.join_date)</span></span>
<span class="line"><span style="color:#E1E4E8;">page </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.paginate(q, </span><span style="color:#FFAB70;">page</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">page, </span><span style="color:#FFAB70;">pre_page</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">pre_page)</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&quot;user/list.html&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">page</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">page)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.select(User)</span></span>
<span class="line"><span style="color:#24292E;">q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> q.order_by(User.join_date)</span></span>
<span class="line"><span style="color:#24292E;">page </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.paginate(q, </span><span style="color:#E36209;">page</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">page, </span><span style="color:#E36209;">pre_page</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">pre_page)</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&quot;user/list.html&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">page</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">page)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div></div><h3 id="自定义数据表名" tabindex="-1">自定义数据表名 <a class="header-anchor" href="#自定义数据表名" aria-label="Permalink to &quot;自定义数据表名&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">db</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    __tablename__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;info_user&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">db</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    __tablename__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;info_user&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>用<code>__tablename__</code> 来自定义表名</p><h3 id="自定义配置" tabindex="-1">自定义配置 <a class="header-anchor" href="#自定义配置" aria-label="Permalink to &quot;自定义配置&quot;">​</a></h3><p>这里就挑常用的</p><h4 id="sqlalchemy-database-uri" tabindex="-1">SQLALCHEMY_DATABASE_URI <a class="header-anchor" href="#sqlalchemy-database-uri" aria-label="Permalink to &quot;SQLALCHEMY_DATABASE_URI&quot;">​</a></h4><p>链接网址配置</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">app.config[</span><span style="color:#9ECBFF;">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;dialect://username:password@host:port/database&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.config[</span><span style="color:#032F62;">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;dialect://username:password@host:port/database&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="注-1" tabindex="-1">注 <a class="header-anchor" href="#注-1" aria-label="Permalink to &quot;注&quot;">​</a></h5><p>如果使用mysql会出现<code>无MySQLdb这个包</code>的错误这时有两种解决办法</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-CLgcd" id="tab-SmEk8mm" checked="checked"><label for="tab-SmEk8mm">第一种</label><input type="radio" name="group-CLgcd" id="tab-_LM5jhy"><label for="tab-_LM5jhy">第二种</label></div><div class="blocks"><div class="language-python vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">app.config[</span><span style="color:#9ECBFF;">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;mysql+pymysql://username:password@host:port/database&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.config[</span><span style="color:#032F62;">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;mysql+pymysql://username:password@host:port/database&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pymysql</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pymysql.install_as_MySQLdb()</span></span>
<span class="line"><span style="color:#E1E4E8;">app.config[</span><span style="color:#9ECBFF;">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;mysql://username:password@host:port/database&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pymysql</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pymysql.install_as_MySQLdb()</span></span>
<span class="line"><span style="color:#24292E;">app.config[</span><span style="color:#032F62;">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;mysql://username:password@host:port/database&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div></div><h4 id="sqlalchemy-track-modifications" tabindex="-1">SQLALCHEMY_TRACK_MODIFICATIONS <a class="header-anchor" href="#sqlalchemy-track-modifications" aria-label="Permalink to &quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;">​</a></h4><p>如果启用，将记录模型上的所有 insert 、 update 和 delete 操作，然后在调用时 <code>session.commit()</code> 发送 <code>models_committed</code> 和 <code>before_models_committed</code> 信号。</p><h3 id="数据库关系" tabindex="-1">数据库关系 <a class="header-anchor" href="#数据库关系" aria-label="Permalink to &quot;数据库关系&quot;">​</a></h3><p>在学习sql语言时就了解到了有几大关系：一对多，多对多模型 在开发中特别常用</p><p>简单来说就是可以通过一个user数据直接取到他的teacher的对象 他的teacher也可以取到所有同学的对象</p><h4 id="一对多" tabindex="-1">一对多 <a class="header-anchor" href="#一对多" aria-label="Permalink to &quot;一对多&quot;">​</a></h4><p>相当于一篇文章只能有一个作者 而一个作者能有很多篇文章</p><p>像，这样的关系模型被称为一对多模型</p><h5 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h5><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">db</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;">): </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.Column(db.Integer, </span><span style="color:#FFAB70;">primary_key</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.Column(db.String(</span><span style="color:#79B8FF;">70</span><span style="color:#E1E4E8;">), </span><span style="color:#FFAB70;">unique</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.Column(db.String(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Article</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">db</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;">): </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.Column(db.Integer, </span><span style="color:#FFAB70;">primary_key</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    title </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.Column(db.String(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">), </span><span style="color:#FFAB70;">index</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.Column(db.Text)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">db</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;">): </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.Column(db.Integer, </span><span style="color:#E36209;">primary_key</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.Column(db.String(</span><span style="color:#005CC5;">70</span><span style="color:#24292E;">), </span><span style="color:#E36209;">unique</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.Column(db.String(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Article</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">db</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;">): </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.Column(db.Integer, </span><span style="color:#E36209;">primary_key</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    title </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.Column(db.String(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">), </span><span style="color:#E36209;">index</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.Column(db.Text)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>首先定义两个表格：用户、文章表</p><p>现在在这两个模型之间建立一个简单的一对多关系， 表示用户的User中添加一个关系属性articles， 作为 集合（collection）属性，当我们对特定的User对象调用articles属性会返 回所有相关的Article对象。这就是一对多模型。</p><h5 id="定义外键" tabindex="-1">定义外键 <a class="header-anchor" href="#定义外键" aria-label="Permalink to &quot;定义外键&quot;">​</a></h5><p>什么是外键，通俗的来说就是一个表里面每一列数据的id是唯一的通过<code>primary_key=True</code>定义</p><p>定义关系首先要在Article创建一个外键 因为一个文章只能有一个用户（User）</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Article</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">db</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;">): </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    user_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.Column(db.Integer, db.ForeignKey(</span><span style="color:#9ECBFF;">&#39;user.id&#39;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Article</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">db</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;">): </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    user_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.Column(db.Integer, db.ForeignKey(</span><span style="color:#032F62;">&#39;user.id&#39;</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这个字段使用db.ForeignKey类定义Article为外键，</p><blockquote><p><strong>传入关系另一侧的表名</strong> + <strong>主键字段</strong> = <strong>user.id</strong>。</p></blockquote><p>实际的效果是将article表的user_id的值限制为 user表的id列的值。 它将用来存储Article表中记录的主键值</p><h6 id="注-2" tabindex="-1">注 <a class="header-anchor" href="#注-2" aria-label="Permalink to &quot;注&quot;">​</a></h6><p>外键字段的命名没有限制， 为了区分名称，还有user_id的外键是user这个表格里面的主键（id）字段,所以命名 user_id</p><p>ForeignKey传入的user.id, 这个user是User表名，在这里传入的时候<strong>大写默认变小写</strong> 还可以根据上文的<code>__tablename__</code>修改表名</p><h5 id="定义关系类属性" tabindex="-1">定义关系类属性 <a class="header-anchor" href="#定义关系类属性" aria-label="Permalink to &quot;定义关系类属性&quot;">​</a></h5><p>定义关系的第二步是使用关系函数定义关系属性。 在定义属性中，一般把属性定义在User中 因为一个用户能有很多篇文章。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">db</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;">): </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	articles </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.relationship(</span><span style="color:#9ECBFF;">&#39;Article&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">db</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;">): </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">...</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	articles </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.relationship(</span><span style="color:#032F62;">&#39;Article&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><strong>relationship()函数的第一个参数为关系另一侧的模型名称， 它会告诉SQLAlchemy将User与Article类建立关系。</strong></li><li>而ForeignKey，里面传入的是<strong>表名</strong>+主键字段</li></ul><p><strong>这两个一定要区分开</strong></p><h5 id="新增-建立-关系" tabindex="-1">新增（建立）关系 <a class="header-anchor" href="#新增-建立-关系" aria-label="Permalink to &quot;新增（建立）关系&quot;">​</a></h5><p>建立关系的方式大概有两种：</p><ul><li>1.直接通过Article直接修改user_id</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">article1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Article.query.get(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">article.user_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">db.session.commit() </span><span style="color:#6A737D;"># 提交到数据库</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">article1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Article.query.get(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">article.user_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">db.session.commit() </span><span style="color:#6A737D;"># 提交到数据库</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>2.通过User的article属性直接append（删除是remove，因为User.articles是个<strong>列表</strong>），添加article对象</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">article1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Article.query.get(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">user1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.query.get(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">user1.article.append(article1)</span></span>
<span class="line"><span style="color:#E1E4E8;">db.session.commit() </span><span style="color:#6A737D;"># 提交到数据库</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">article1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Article.query.get(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">user1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.query.get(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">user1.article.append(article1)</span></span>
<span class="line"><span style="color:#24292E;">db.session.commit() </span><span style="color:#6A737D;"># 提交到数据库</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> article1.user_id </span></span>
<span class="line"><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> user1.articles </span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Article </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> article1.user_id </span></span>
<span class="line"><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> user1.articles </span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Article </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="删除关系-同理" tabindex="-1">删除关系（同理） <a class="header-anchor" href="#删除关系-同理" aria-label="Permalink to &quot;删除关系（同理）&quot;">​</a></h5><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">article1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Article.query.get(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">user1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.query.get(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">user1.article.remove(article1)</span></span>
<span class="line"><span style="color:#E1E4E8;">db.session.commit() </span><span style="color:#6A737D;"># 提交到数据库</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">article1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Article.query.get(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">user1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.query.get(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">user1.article.remove(article1)</span></span>
<span class="line"><span style="color:#24292E;">db.session.commit() </span><span style="color:#6A737D;"># 提交到数据库</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>最后不要忘记<code>db.session.commit()</code>保存提交到数据库</p><blockquote><p>relationship常用参数</p></blockquote><table><thead><tr><th>参数名</th><th>说 明</th></tr></thead><tbody><tr><td>back_populates</td><td>定义反向引用，用于建立双向关系，在关系的另一侧也必须显式定义关系属性</td></tr><tr><td>backref</td><td>添加反向引用，A动在另一侧建立关系属性，是back_populates的简化版</td></tr><tr><td>lazy</td><td>指定如何加载相关记录，具体选项见下表</td></tr><tr><td>uselist</td><td>指定是否使用列表的形式加载记录，设为False则使用标量(scalar)</td></tr><tr><td>cascade</td><td>设置级联操作，后面会具体介绍</td></tr><tr><td>order_by</td><td>指定加载相关记录时的排序方式</td></tr><tr><td>secondary</td><td>在多对多关系中指定关联表</td></tr><tr><td>primaryjoin</td><td>指定多对多关系中的一级联结条件</td></tr><tr><td>secondaryjoin</td><td>指定多对多关系中的二级联结条件</td></tr></tbody></table><blockquote><p>lazy参数可选值</p></blockquote><table><thead><tr><th>关系加载方式</th><th>说 明</th></tr></thead><tbody><tr><td>select</td><td>在必要时一次性加载记录，返回包含记录的列表（默认值），等同于lazy=Tme</td></tr><tr><td>joined</td><td>和父査询一样加载记录，但使用联结，等同于lazy=False</td></tr><tr><td>immediate</td><td>一旦父查询加载就加载</td></tr><tr><td>subquery</td><td>类似于joined,不过将使用子查询</td></tr><tr><td>dynamic</td><td>不直接加载记录，而是返回一个包含相关记录的query对象，以便再继续附加查询函 数对结果进行过滤</td></tr></tbody></table><p>dynamic选项仅用于集合关系属性，不可用于一对多或是在关系函数中将uselist参数设为False的情况。</p><p>许多教程和示例使用dynamic来动态加载所有集合关系属性对应的记 录，这是应该避免的行为。使用dynamic加载方式意味着每次操作关系都会 执行一次SQL查询，这会造成潜在的性能问题。大多数情况下我们只需要 使用默认值（select），只有在调用关系属性会返回大量记录，并且总是需要对关系属性返回的结果附加额外的查询时才需要使用动态加载 （lazy=&#39;dynamic&#39;）。</p><h5 id="建立双向访问关系" tabindex="-1">建立双向访问关系 <a class="header-anchor" href="#建立双向访问关系" aria-label="Permalink to &quot;建立双向访问关系&quot;">​</a></h5><p>比如我可以通过User.articles访问所有的文章 我也能通过Article.user获取User对象</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">db</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># # 2. 定义关系</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># articles = db.relationship(&#39;Article&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 4. 可以直接添加反向引用</span></span>
<span class="line"><span style="color:#E1E4E8;">    articles </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.relationship(</span><span style="color:#9ECBFF;">&#39;Article&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">backref</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;user&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">db</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># # 2. 定义关系</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># articles = db.relationship(&#39;Article&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 4. 可以直接添加反向引用</span></span>
<span class="line"><span style="color:#24292E;">    articles </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.relationship(</span><span style="color:#032F62;">&#39;Article&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">backref</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>添加反向引用就可以实现 Article.user能获取User对象</p><p>建立关系：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">article1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Article.query.get(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(article1.user)</span></span>
<span class="line"><span style="color:#E1E4E8;">user1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.query.get(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(user1.articles)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">article1.user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user1</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(article1.user)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">article1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Article.query.get(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(article1.user)</span></span>
<span class="line"><span style="color:#24292E;">user1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.query.get(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(user1.articles)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">article1.user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user1</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(article1.user)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>相对的，将某个Article的user属性设为None，就会解除与对应User对象的关系：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">article1.user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(article1.user)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">article1.user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(article1.user)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>另外，在反向调用是时，如果想继续查询，想要把<code>lazy=&quot;dynamic&quot;</code> 可以这么做</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">db</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># # 2. 定义关系</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># articles = db.relationship(&#39;Article&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 4. 可以直接添加反向引用</span></span>
<span class="line"><span style="color:#E1E4E8;">    articles </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.relationship(</span><span style="color:#9ECBFF;">&#39;Article&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">backref</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">db.backref(</span><span style="color:#9ECBFF;">&#39;user&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">lazy</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;dynamic&quot;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">db</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># # 2. 定义关系</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># articles = db.relationship(&#39;Article&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 4. 可以直接添加反向引用</span></span>
<span class="line"><span style="color:#24292E;">    articles </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.relationship(</span><span style="color:#032F62;">&#39;Article&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">backref</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">db.backref(</span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">lazy</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;dynamic&quot;</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="多对多" tabindex="-1">多对多 <a class="header-anchor" href="#多对多" aria-label="Permalink to &quot;多对多&quot;">​</a></h4><p>多对多模型就相当于：一篇文章可以被很多用户收藏；而用户可以收藏很多篇文章 这样比如说:</p><ul><li>张三收藏了《三体》《流浪地球》；</li><li>李四收藏了《三体》</li></ul><p>但是如果想储存多对多关系，需要另外定义一个表</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tb_user_collection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.Table(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;info_user_collection&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    db.Column(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">, db.Integer, db.ForeignKey(</span><span style="color:#9ECBFF;">&quot;user.id&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#FFAB70;">primary_key</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span></span>
<span class="line"><span style="color:#E1E4E8;">    ),  </span><span style="color:#6A737D;"># 文章编号</span></span>
<span class="line"><span style="color:#E1E4E8;">    db.Column(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;article_id&quot;</span><span style="color:#E1E4E8;">, db.Integer, db.ForeignKey(</span><span style="color:#9ECBFF;">&quot;article.id&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#FFAB70;">primary_key</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span></span>
<span class="line"><span style="color:#E1E4E8;">    ),  </span><span style="color:#6A737D;"># 分类编号</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">db</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    collection_articles </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.relationship(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Article&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">secondary</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">tb_user_collection</span></span>
<span class="line"><span style="color:#E1E4E8;">    )  </span><span style="color:#6A737D;"># 用户收藏的文章</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tb_user_collection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.Table(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;info_user_collection&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    db.Column(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">, db.Integer, db.ForeignKey(</span><span style="color:#032F62;">&quot;user.id&quot;</span><span style="color:#24292E;">), </span><span style="color:#E36209;">primary_key</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">    ),  </span><span style="color:#6A737D;"># 文章编号</span></span>
<span class="line"><span style="color:#24292E;">    db.Column(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;article_id&quot;</span><span style="color:#24292E;">, db.Integer, db.ForeignKey(</span><span style="color:#032F62;">&quot;article.id&quot;</span><span style="color:#24292E;">), </span><span style="color:#E36209;">primary_key</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">    ),  </span><span style="color:#6A737D;"># 分类编号</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">db</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">    collection_articles </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.relationship(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Article&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">secondary</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">tb_user_collection</span></span>
<span class="line"><span style="color:#24292E;">    )  </span><span style="color:#6A737D;"># 用户收藏的文章</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>定义当方法和一对多模型差不多， 而在<code>relationship()</code>里面secondary需要添加多对多模型关系的表的对象 在<code>info_user_collection</code>表中，需要定义两个外键，分别是<code>user.id</code>、<code>article.id</code></p><h5 id="新增-删除-关系" tabindex="-1">新增|删除 关系 <a class="header-anchor" href="#新增-删除-关系" aria-label="Permalink to &quot;新增|删除 关系&quot;">​</a></h5><p>方法和一对多模型相似使用列表的<code>append()</code>、<code>remove()</code>来实现新增删除对象</p><h5 id="双向查询" tabindex="-1">双向查询 <a class="header-anchor" href="#双向查询" aria-label="Permalink to &quot;双向查询&quot;">​</a></h5><p>定义方式和一对多模型一模一样，还是使用backref参数设置反向查询对象</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">db</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    collection_articles </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.relationship(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Article&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">secondary</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">tb_user_collection, </span><span style="color:#FFAB70;">backref</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;users&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    )  </span><span style="color:#6A737D;"># 用户收藏的文章</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">db</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">    collection_articles </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.relationship(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Article&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">secondary</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">tb_user_collection, </span><span style="color:#E36209;">backref</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;users&#39;</span></span>
<span class="line"><span style="color:#24292E;">    )  </span><span style="color:#6A737D;"># 用户收藏的文章</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="flask-migrate" tabindex="-1">Flask-Migrate <a class="header-anchor" href="#flask-migrate" aria-label="Permalink to &quot;Flask-Migrate&quot;">​</a></h2><p>Flask-Migrate 是一个扩展，用于处理使用 Alembic 的 Flask 应用程序的 SQLAlchemy 数据库迁移。数据库操作作为 <code>flask db</code> 命令下的命令行参数提供。</p><h3 id="安装-1" tabindex="-1">安装 <a class="header-anchor" href="#安装-1" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-gWvAf" id="tab-T8_6_AP" checked="checked"><label for="tab-T8_6_AP">pip</label><input type="radio" name="group-gWvAf" id="tab-R8nCinc"><label for="tab-R8nCinc">poetry</label></div><div class="blocks"><div class="language-shell vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Flask-Migrate</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Flask-Migrate</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">poetry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Flask-Migrate</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Flask-Migrate</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><h3 id="注册到app-1" tabindex="-1">注册到app <a class="header-anchor" href="#注册到app-1" aria-label="Permalink to &quot;注册到app&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Flask</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask_sqlalchemy </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> SQLAlchemy</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask_migrate </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Migrate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flask(</span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">app.config[</span><span style="color:#9ECBFF;">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;sqlite:///app.db&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">db </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SQLAlchemy(app)</span></span>
<span class="line"><span style="color:#E1E4E8;">migrate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Migrate(app, db)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">db</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.Column(db.Integer, </span><span style="color:#FFAB70;">primary_key</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.Column(db.String(</span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Flask</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask_sqlalchemy </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> SQLAlchemy</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask_migrate </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Migrate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flask(</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">app.config[</span><span style="color:#032F62;">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;sqlite:///app.db&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SQLAlchemy(app)</span></span>
<span class="line"><span style="color:#24292E;">migrate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Migrate(app, db)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">db</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Model</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.Column(db.Integer, </span><span style="color:#E36209;">primary_key</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.Column(db.String(</span><span style="color:#005CC5;">128</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>注册的时候要传入两个参数第一个是<strong>app对象</strong>，另一个是<strong>flask-sqlalchemy的db对象</strong></p><h3 id="数据迁移" tabindex="-1">数据迁移 <a class="header-anchor" href="#数据迁移" aria-label="Permalink to &quot;数据迁移&quot;">​</a></h3><p>使用上述应用程序，您可以使用以下命令创建数据库或启用迁移（如果数据库已存在）：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">flask</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">db</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">flask</span><span style="color:#24292E;"> </span><span style="color:#032F62;">db</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>请注意，必须根据 Flask 文档设置 <code>FLASK_APP</code> 环境变量，此命令才能正常工作。这会将一个 <code>migrations</code> 文件夹添加到您的应用程序中。此文件夹的内容需要与其他源文件一起添加到版本控制中。</p><p>然后，您可以生成初始迁移：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">flask</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">db</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">migrate</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">flask</span><span style="color:#24292E;"> </span><span style="color:#032F62;">db</span><span style="color:#24292E;"> </span><span style="color:#032F62;">migrate</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>迁移脚本需要审查和编辑，因为 Alembic 目前不会检测到您对模型所做的每个更改。特别是，Alembic 目前无法检测到索引。完成后，还需要将迁移脚本添加到版本控制中。</p><p>然后，您可以将迁移应用于数据库：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">flask</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">db</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">upgrade</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">flask</span><span style="color:#24292E;"> </span><span style="color:#032F62;">db</span><span style="color:#24292E;"> </span><span style="color:#032F62;">upgrade</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>然后，每次数据库模型更改时，都重复 migrate and upgrade 命令。</strong></p>`,187),o=[e];function t(r,c,i,y,d,E){return a(),n("div",null,o)}const h=s(p,[["render",t]]);export{b as __pageData,h as default};
