import{_ as a,o as e,c as t,Q as r}from"./chunks/framework.b6PMUn9J.js";const i="/assets/img_3.k5mzSlHp.png",l="/assets/img.suHonemN.png",o="/assets/img_4.wyGpf9N6.png",s="/assets/img_5.3hZK92_U.png",f=JSON.parse('{"title":"学习编程的文档学习法","description":"介绍了，学习编程的文档学习法","frontmatter":{"date":"2023.8.24","title":"学习编程的文档学习法","tags":["自学","IT","总结"],"description":"介绍了，学习编程的文档学习法","link":"/post/document-learn-method.html"},"headers":[],"relativePath":"posts/document-learn-method.md","filePath":"posts/document-learn-method.md","lastUpdated":1700227085000}'),n={name:"posts/document-learn-method.md"},p=r('<h1 id="学习编程——文档学习法" tabindex="-1">学习编程——文档学习法 <a class="header-anchor" href="#学习编程——文档学习法" aria-label="Permalink to &quot;学习编程——文档学习法&quot;">​</a></h1><h2 id="方式" tabindex="-1">方式 <a class="header-anchor" href="#方式" aria-label="Permalink to &quot;方式&quot;">​</a></h2><p>一般来说学习编程分为：</p><ul><li>1.自学</li><li>2.从师受业</li></ul><h3 id="自学" tabindex="-1">自学 <a class="header-anchor" href="#自学" aria-label="Permalink to &quot;自学&quot;">​</a></h3><ul><li>1.自学的难度可定会大，时间多花费多，目标不明确等问题的出现</li><li>2.不看文档，而去观看不同机构不同老师的免费视频，每个老师都有自己的习惯，都有自己的特点，所以自学是一件困难的事</li></ul><h3 id="授业" tabindex="-1">授业 <a class="header-anchor" href="#授业" aria-label="Permalink to &quot;授业&quot;">​</a></h3><ul><li>2.有老师教学，学习效率会快，有老师的经验，能力提升会更快</li><li>3.遇到问题有老师帮助解答，效率更高</li></ul><h2 id="文档学习法" tabindex="-1">文档学习法 <a class="header-anchor" href="#文档学习法" aria-label="Permalink to &quot;文档学习法&quot;">​</a></h2><p>前面引入了学习方式：自学、授业</p><p>而如果要是学的更多更深，从师授业的方法显然不靠谱</p><p>所以学习编程，就有了一个新的自学方法——文档学习法</p><p>在这里我更加推荐自学，自学，自学!!!</p><h3 id="了解文档结构" tabindex="-1">了解文档结构 <a class="header-anchor" href="#了解文档结构" aria-label="Permalink to &quot;了解文档结构&quot;">​</a></h3><p>编程文档通常由多个部分组成，包括简介、安装说明、教程、参考手册等。在阅读文档之前，了解其结构是非常重要的。这样可以帮助你更快地找到所需的信息，并且可以避免浪费时间在不必要的内容上。</p><p><strong>掌握结构和目录就等于成功的一半</strong></p><p>了解了文档目录其实也是更好的穿线，复习查找资料的最好方法</p><h3 id="阅读简介和概览" tabindex="-1">阅读简介和概览 <a class="header-anchor" href="#阅读简介和概览" aria-label="Permalink to &quot;阅读简介和概览&quot;">​</a></h3><p><strong>了解这个框架（工具）的用途</strong></p><p>编程文档的简介和概览部分通常包含了项目的基本信息、主要特性、用途等方面的介绍。这些内容可以帮助你更好地了解所要使用的编程工具的背景和功能。在阅读简介和概览的过程中，你可以注意以下几点：</p><ul><li><p>了解项目的定位和目标用户</p></li><li><p>确定项目的主要功能和用途</p></li><li><p>查看项目的版本信息和更新日志等</p></li></ul><p>我们明白这个框架（工具）是干什么的，之后我们要进行思考，在开发中遇到什么样的问题，我们才能 使用这个框架（工具）</p><p><strong>只有阅读简介，才能明白其用途，更好了解运行方式，和底层逻辑</strong></p><h3 id="查看示例代码" tabindex="-1">查看示例代码 <a class="header-anchor" href="#查看示例代码" aria-label="Permalink to &quot;查看示例代码&quot;">​</a></h3><p>编程文档中通常包含了一些示例代码，这些代码可以帮助你更好地理解编程工具的使用方法和功能。通过查看示例代码，你可以学习如何正确地使用编程语言、库、框架等工具，并且可以从中学习一些最佳实践和技巧。 他也是可以很好的根据官方的代码的规则，规范我们的代码，让代码变得整洁。</p><p><strong>在做项目中，完全可以靠文档的复制粘贴来实现功能</strong></p><h3 id="注意参数和返回值" tabindex="-1">注意参数和返回值 <a class="header-anchor" href="#注意参数和返回值" aria-label="Permalink to &quot;注意参数和返回值&quot;">​</a></h3><p>在阅读函数、类、方法等代码段的文档时，你需要注意其参数和返回值的定义和说明。了解参数和返回值的含义和用法可以帮助你正确地使用编程工具，并且可以避免一些常见的错误和bug。 这样我们可以根据文档上面的的函数等方法的参数，返回值更好的实现想要的效果</p><p><strong>根据参数和返回值，可以基本了解用途，再根据源码，即可了解用法，以及对不妥之处修改</strong></p><h3 id="搜索" tabindex="-1">搜索 <a class="header-anchor" href="#搜索" aria-label="Permalink to &quot;搜索&quot;">​</a></h3><p>如果你无法在编程文档中找到所需的信息，可以尝试使用搜索功能。许多编程文档都提供了搜索功能，你可以输入关键字进行搜索。使用搜索功能可以帮助你快速定位所需的信息，并且可以节省你的时间。</p><p><strong>搜索是文档网站必要模块之一，如果遇到问题或忘记知识点可以通过搜索来查找 或者可以根据文档总结自己的学习笔记，供自己学习</strong></p><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p>不爱看书的人对上面的内容可能不感兴趣，没有耐心看下去，看不懂</p><p>我现在给大家举个例子，文档学习的例子</p><h4 id="了解文档结构-1" tabindex="-1">了解文档结构 <a class="header-anchor" href="#了解文档结构-1" aria-label="Permalink to &quot;了解文档结构&quot;">​</a></h4><p>首先以<a href="https://cn.vuejs.org/" target="_blank" rel="noreferrer">vue</a> 为例子</p><h5 id="首先观察导航栏" tabindex="-1">首先观察导航栏 <a class="header-anchor" href="#首先观察导航栏" aria-label="Permalink to &quot;首先观察导航栏&quot;">​</a></h5><p><img src="'+i+'" alt="img_3.png"> 有文档，有api等等等等的内容，感兴趣的可以一个一个看</p><h5 id="然后在主要文档里面观察侧边栏" tabindex="-1">然后在主要文档里面观察侧边栏 <a class="header-anchor" href="#然后在主要文档里面观察侧边栏" aria-label="Permalink to &quot;然后在主要文档里面观察侧边栏&quot;">​</a></h5><p><img src="'+l+'" alt="img.png"> 等等，往下翻还有内容</p><p>大致分为</p><ul><li>开始</li><li>基础</li><li>深入组件</li><li>逻辑复用</li><li>内置组件</li><li>应用规模化</li><li>最佳实践</li><li>TypeScript</li><li>进阶主题</li></ul><p>就可以 根据这一个个目录从头到尾去学习了</p><h4 id="阅读简介和概览-1" tabindex="-1">阅读简介和概览 <a class="header-anchor" href="#阅读简介和概览-1" aria-label="Permalink to &quot;阅读简介和概览&quot;">​</a></h4><p>阅读简介和概览我们可以在文档中打开<code>开始</code><img src="'+o+'" alt="img_4.png"></p><p>阅读简介里面的内容了解vue的用途和好处等</p><h4 id="查看示例代码-1" tabindex="-1">查看示例代码 <a class="header-anchor" href="#查看示例代码-1" aria-label="Permalink to &quot;查看示例代码&quot;">​</a></h4><p>在每一个文档页面中都有例示代码，可以根据你的需求复制<strong>更加相似的代码</strong>，简单改一改就变成你的代码了</p><h4 id="注意参数和返回值-1" tabindex="-1">注意参数和返回值 <a class="header-anchor" href="#注意参数和返回值-1" aria-label="Permalink to &quot;注意参数和返回值&quot;">​</a></h4><p>这就需要，看文档了</p><h5 id="以响应式基础为例" tabindex="-1">以响应式基础为例 <a class="header-anchor" href="#以响应式基础为例" aria-label="Permalink to &quot;以响应式基础为例&quot;">​</a></h5><p>要了解ref(),和reactive()响应式变量的区别，里面传参的不同才能了解到具体用法</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">使用 reactive() API。与将内部值包装在特殊对象中的 ref 不同，reactive() 将使对象本身具有响应性</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">使用 reactive() API。与将内部值包装在特殊对象中的 ref 不同，reactive() 将使对象本身具有响应性</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="搜索-1" tabindex="-1">搜索 <a class="header-anchor" href="#搜索-1" aria-label="Permalink to &quot;搜索&quot;">​</a></h4><p><img src="'+s+'" alt="img_5.png"> 根据想查找的内容搜索</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>文档学习法适合所有开发者，一些老师也是根据官方文档来教学，这样更加的准确，也不会出现比较烂的代码的问题</p>',58),h=[p];function d(c,u,m,b,g,_){return e(),t("div",null,h)}const k=a(n,[["render",d]]);export{f as __pageData,k as default};
