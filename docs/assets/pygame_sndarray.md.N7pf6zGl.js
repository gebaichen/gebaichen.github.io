import{_ as a,c as e,o as r,aS as p}from"./chunks/framework.Dbjoj8K5.js";const g=JSON.parse('{"title":"sndarray | Pygame中文文档","description":"","frontmatter":{},"headers":[],"relativePath":"pygame/sndarray.md","filePath":"pygame/sndarray.md","lastUpdated":1708595373000}'),y={name:"pygame/sndarray.md"},t=p('<h1 id="sndarray-pygame中文文档" tabindex="-1">sndarray | Pygame中文文档 <a class="header-anchor" href="#sndarray-pygame中文文档" aria-label="Permalink to &quot;sndarray | Pygame中文文档&quot;">​</a></h1><h2 id="pygame-sndarray" tabindex="-1">pygame.sndarray <a class="header-anchor" href="#pygame-sndarray" aria-label="Permalink to &quot;pygame.sndarray&quot;">​</a></h2><blockquote><p>Pygame 中访问音频采样数据的模块。</p></blockquote><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><ul><li>pygame.sndarray.array —— 将一个音频采样复制到一个数组内</li><li>pygame.sndarray.samples —— 将一个音频采样引用到一个数组内</li><li>pygame.sndarray.make_sound —— 将一个数组转变成一个音频对象</li><li>pygame.sndarray.use_arraytype —— 设置用于音频数组的数组系统</li><li>pygame.sndarray.get_arraytype —— 获取当前正在使用的数组类型</li><li>pygame.sndarray.get_arraytypes —— 获取当前正在工作的数组系统类型</li></ul><p>以上函数用于在数字数组和音频对象之间进行相互转换。</p><p>本模块仅当 pygame 可以使用 numpy 或 Numeric 模块时是有效的（Numeric 相对过时了，请使用最新的 numpy）。</p><p>音频数据是由每秒数千个采样组成，而且每个采样都是特定时刻的音波的振幅。例如，在 22-kHz 格式里，音频数组的第 5 个元素是音波在 5/22000 秒后的振幅。</p><p>每个采样是一个 8 位或者 16 位的整数，这取决于数据格式。一个立体声文件里每个采样有两个值，而单声道文件里每个采样只有一个值。</p><p>支持的数组系统有：</p><ul><li>numpy</li><li>Numeric（过时，将在 Pygame 1.9.3 中弃用）</li></ul><p>如果安装了 numpy 模块，那么默认使用的是 numpy 数组。否则将会被设置成 Numeric（如果有安装），但会产生一个反对的警告（说这玩意儿快过时了，建议使用 numpy 代替）。</p><p>如果 numpy 和 Numeric 都没有安装，本模块会产生一个 ImportError 错误。</p><p>通过使用 use_arraytype() 函数，可以改变使用的数组类型（将字符串 &quot;numpy&quot; 或 &quot;Numeric&quot; 作为参数）。</p><p>注意：numpy 和 Numeric 并不是完全兼容。对于某一种数组类型来说的一个正确操作，可能在另外一种数组类型中会产生不同的效果，甚至导致彻底的崩溃。</p><p>此外，相比于 Numeric，numpy 可以使用无符号 16 位整数。如果音频采样类型需要，16 位的音频数据可以被当做无符号整数使用。而 Numeric 则总是使用有符号整数表示采样数据。这十分重要，请务必牢记。</p><p>在 Pygame 1.8 中加入对 numpy 的支持，并于 Pygame 1.9.2 开始反对使用 Numeric 。</p><h2 id="函数详解" tabindex="-1">函数详解 <a class="header-anchor" href="#函数详解" aria-label="Permalink to &quot;函数详解&quot;">​</a></h2><p><code>pygame.sndarray.array()</code></p><p>将一个音频采样复制到一个数组内。</p><p>array(Sound) -&gt; array</p><p>创建一个新的数组用于保存音频数据，并将采样值复制到数组内。</p><p>这个数组将一直保持由 pygame.mixer.get_init() 所返回的格式。</p><p><code>pygame.sndarray.samples()</code></p><p>将一个音频采样引用到一个数组内。</p><p>samples(Sound) -&gt; array</p><p>创建一个直接引用音频对象内的采样的新数组。修改这个数组将会改变音频。</p><p>这个数组将一直保持由 pygame.mixer.get_init() 所返回的格式。</p><p><code>pygame.sndarray.make_sound()</code></p><p>将一个数组转变成一个音频对象。</p><p>make_sound(array) -&gt; Sound</p><p>根据一个音频数组，创建一个可播放的音频对象。</p><p>mixer 模块必须先初始化，且数组格式必须与 mixer 音频格式相似。</p><p><code>pygame.sndarray.use_arraytype()</code></p><p>设置用于音频数组的数组系统。</p><p>use_arraytype (arraytype) -&gt; None</p><p>使用模块函数所要求的数组类型。目前支持的数组类型为：</p><ul><li>numpy</li><li>Numeric（过时，将在 Pygame 1.9.3 中弃用）</li></ul><p>如果要求的类型不被支持，会产生一个 ValueError 的错误。</p><p><code>pygame.sndarray.get_arraytype()</code></p><p>获取当前正在使用的数组类型。</p><p>get_arraytype () -&gt; str</p><p>返回当前正在使用的数组的类型。</p><p>此函数返回的是 get_arraytypes() 的返回元组内的一个值，而且会表明哪种数组模块类型被用于创建该数组。</p><p><code>pygame.sndarray.get_arraytypes()</code></p><p>获取当前正在工作的数组系统类型</p><p>get_arraytypes () -&gt; tuple</p><p>检查哪个数组系统是可使用的然后返回相应的字符串元组。</p><p>元组的值可以被直接用于 pygame.sndarray.use_arraytype() 函数。如果没有发现受支持的数组系统类型，返回 None。</p>',49),m=[t];function n(s,d,o,i,u,l){return r(),e("div",null,m)}const _=a(y,[["render",n]]);export{g as __pageData,_ as default};
