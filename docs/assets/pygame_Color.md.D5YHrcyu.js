import{_ as o,c as a,o as l,aS as p}from"./chunks/framework.Dbjoj8K5.js";const d=JSON.parse('{"title":"Color | Pygame中文文档","description":"","frontmatter":{},"headers":[],"relativePath":"pygame/Color.md","filePath":"pygame/Color.md","lastUpdated":1708595373000}'),e={name:"pygame/Color.md"},r=p('<h1 id="color-pygame中文文档" tabindex="-1">Color | Pygame中文文档 <a class="header-anchor" href="#color-pygame中文文档" aria-label="Permalink to &quot;Color | Pygame中文文档&quot;">​</a></h1><h2 id="class-pygame-color" tabindex="-1">class pygame.Color <a class="header-anchor" href="#class-pygame-color" aria-label="Permalink to &quot;class pygame.Color&quot;">​</a></h2><blockquote><p>Pygame 中用于描述颜色的对象。</p></blockquote><p>Color(name) -&gt; Color</p><p>Color(r, g, b, a) -&gt; Color</p><p>Color(rgbvalue) -&gt; Color</p><h3 id="方法-属性" tabindex="-1">方法 &amp; 属性 <a class="header-anchor" href="#方法-属性" aria-label="Permalink to &quot;方法 &amp; 属性&quot;">​</a></h3><ul><li>pygame.Color.r — 获取或设置 Color 对象的红色值</li><li>pygame.Color.g — 获取或设置 Color 对象的绿色值</li><li>pygame.Color.b — 获取或设置 Color 对象的蓝色值</li><li>pygame.Color.a — 获取或设置 Color 对象的 alpha 值</li><li>pygame.Color.cmy — 获取或设置 Color 对象表示的 CMY 值</li><li>pygame.Color.hsva — 获取或设置 Color 对象表示的 HSVA 值</li><li>pygame.Color.hsla — 获取或设置 Color 对象表示的 HSLA 值</li><li>pygame.Color.i1i2i3 — 获取或设置 Color 对象表示的 I1I2I3 值</li><li>pygame.Color.normalize() — 返回 Color 对象的标准化 RGBA 值</li><li>pygame.Color.correct_gamma() — 应用一定的伽马值调整 Color 对象</li><li>pygame.Color.set_length() — 设置 Color 对象的长度（成员数量）</li></ul><p>Pygame 使用 Color 类表示 RGBA 颜色值，每个颜色值的取值范围是 0 ~ 255。允许通过基本的算术运算创造新的颜色值，支持转换为其他颜色空间，例如 HSV 或 HSL，并让你调整单个颜色通道。当没有给出 alpha 的值是，默认是 255（不透明）。</p><p>“RGB值”可以是一个颜色名，一个 HTML 颜色格式的字符串，一个 16 进制数的字符串，或者一个整型像素值。HTML 格式是 &quot;#rrggbbaa&quot;，其中 &quot;rr&quot;，&quot;gg&quot;，&quot;bb&quot;，&quot;aa&quot; 都是 2 位的 16 进制数。代表 alpha 的 &quot;aa&quot; 是可选的。16 进制数的字符串组成形式为 &quot;0xrrggbbaa&quot;，当然，其中的 &quot;aa&quot; 也是可选的。</p><p>Pygame 1.9.0 之后，颜色对象支持与其他颜色对象进行等值比较（3 或 4 整型元祖）。</p><p>在 Pygame 1.8.1 中有一个 bug，就是 alpha 的默认值被设置为 0，而不是 255。</p><p>Color 对象采用 C 级别的接口输出。输出为只读的一维无符号字节数组，分配与 color 对象相同的长度。对于 CPython 2.6 以后的版本，新的缓冲区接口（与数组接口具有相同的特性）也会被输出。Pygame 1.9.2 新增加的。</p><p>Color 的新实现在 Pygame 1.8.1 中完成。</p><h3 id="方法-属性详解" tabindex="-1">方法 &amp; 属性详解 <a class="header-anchor" href="#方法-属性详解" aria-label="Permalink to &quot;方法 &amp; 属性详解&quot;">​</a></h3><p><code>r</code></p><p>获取或设置 Color 对象的红色值。</p><p>r -&gt; int</p><p>Color 对象的红色值。</p><p><code>g</code></p><p>获取或设置 Color 对象的绿色值。</p><p>g -&gt; int</p><p>Color 对象的绿色值。</p><p><code>b</code></p><p>获取或设置 Color 对象的蓝色值。</p><p>b -&gt; int</p><p>Color 对象的蓝色值。</p><p><code>a</code></p><p>获取或设置 Color 对象的 alpha 值。</p><p>a -&gt; int</p><p>Color 对象的 alpha 值。</p><p><code>cmy</code></p><p>获取或设置 Color 对象表示的 CMY 值。</p><p>cmy -&gt; tuple</p><p>Color 对象表示的 CMY 值。CMY 每个分量的范围是 C = [0, 1]，M = [0, 1]，Y = [0, 1]。</p><p>注意：由于 RGB 值应设为 0 ~ 255，而 CMY 值为 0 ~ 1，因此无法绝对准确地返回所有 RGB 值对应的 CMY 值，会有少许偏差。</p><p>注：CMY 是青（Cyan）、洋红或品红（Magenta）和黄（Yellow）三种颜色的简写，是相减混色模式，用这种方法产生的颜色之所以称为相减色，乃是因为它减少了为视觉系统识别颜色所需要的反射光。由于彩色墨水和颜料的化学特性，用三种基本色得到的黑色不是纯黑色，因此在印刷术中，常常加一种真正的黑色（black ink），这种模型称为 CMYK 模型，广泛应用于印刷术。每种颜色分量的取值范围为0~100；CMY常用于纸张彩色打印方面。</p><p><code>hsva</code></p><p>获取或设置 Color 对象表示的 HSVA 值。</p><p>hsva -&gt; tuple</p><p>Color 对象表示的 HSVA 值。HSVA 每个分量的范围是 H = [0, 360]，S = [0, 100]，V = [0, 100]，A = [0, 100]。</p><p>注意：由于 RGB 值应设为 0 ~ 255，而 HSV 值为 0 ~ 100 和 0 ~ 360，因此无法绝对准确地返回所有 RGB 值对应的 HSV 值，会有少许偏差。</p><p>注：HSV 色彩模型中颜色的参数分别是：色调（H），饱和度（S），亮度（V）。RGB 和 CMY 颜色模型都是面向硬件的，而 HSV（Hue Saturation Value）颜色模型是面向用户的。HSV 模型的三维表示从 RGB 立方体演化而来。设想从 RGB 沿立方体对角线的白色顶点向黑色顶点观察，就可以看到立方体的六边形外形。六边形边界表示色彩，水平轴表示纯度，明度沿垂直轴测量。</p>',43),t=[r];function C(i,c,g,m,s,n){return l(),a("div",null,t)}const h=o(e,[["render",C]]);export{d as __pageData,h as default};
