import{_ as e,c as a,o as p,aS as t}from"./chunks/framework.Dbjoj8K5.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pygame/pygame.md","filePath":"pygame/pygame.md","lastUpdated":1708595373000}'),r={name:"pygame/pygame.md"},i=t(`<h2 id="pygame" tabindex="-1">pygame <a class="header-anchor" href="#pygame" aria-label="Permalink to &quot;pygame&quot;">​</a></h2><blockquote><p>Pygame 最顶层的包。</p></blockquote><ul><li>pygame.init() — 初始化所有导入的 pygame 模块</li><li>pygame.quit() — 卸载所有导入的 pygame 模块</li><li>pygame.error() — 标准 pygame 异常模块</li><li>pygame.get_error() — 获得当前错误信息</li><li>pygame.set_error() — 设置当前错误信息</li><li>pygame.get_sdl_version() — 获得 SDL 的版本号</li><li>pygame.get_sdl_byteorder() — 获得 SDL 的字节顺序</li><li>pygame.register_quit() — 注册一个函数，这个函数将在 pygame 退出时被调用</li><li>pygame.encode_string() — 对 unicode 或字节对象编码</li><li>pygame.encode_file_path() — 将 unicode 或字节对象编码为文件系统路径</li></ul><p>pygame 包是可供使用的最顶层的包。Pygame 被分成许多子模块，但是并不会影响程序使用 Pygame。</p><p>为了方便，在 pygame 中绝大多数的顶级变量被放入名为“pygame.locals”的模块中。意思是说这些变量可通过以下方式导入：</p><div class="language-Python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pygame</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pygame.locals </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当你导入 pygame 后，所有可用的 pygame 子模块都将自动被导入。需要注意的是，一些 pygame 模块是“可选的”，并且可能无法使用。以防万一，Pygame 将提供了一个占位符对象替代原来的模块，这个对象可用来测试某些功能（变量）是否可用。</p><h3 id="pyame-init" tabindex="-1">pyame.init() <a class="header-anchor" href="#pyame-init" aria-label="Permalink to &quot;pyame.init()&quot;">​</a></h3><p>初始化所有导入的 pygame 模块。</p><p>init() -&gt; (numpass, numfail)</p><p>初始化所有导入的 pygame 模块，如果有模块导入失败也不会显示异常，但是将返回一个元组，第一个元素为成功导入的模块数，第二个元素为导入失败的个数。</p><p>也许你想分开初始化不同的模块，以提高你程序的运行速度，或者不加载暂时用不到的模块。</p><p>重复调用 init() 方法是没问题的，也不会有任何负面影响。即使你已经调用了 pygame.quit() 卸载所有模块也是可以的。</p><h3 id="ygame-quit" tabindex="-1">ygame.quit() <a class="header-anchor" href="#ygame-quit" aria-label="Permalink to &quot;ygame.quit()&quot;">​</a></h3><p>卸载所有导入的 pygame 模块。</p><p>quit() -&gt; None</p><p>卸载所有之前被初始化的 pygame 模块。当 python 解释器关闭时，这个方法将被无条件地调用，所以你的程序并不需要调用这个方法，除非你想要终止 pygame 资源，并继续执行其他功能。多次执行这个方法也是没有问题的。</p><p>注意：调用这个方法 pygame.quit() 会结束所有模块，但不会结束你的程序。建议用正常结束 python 程序的方法来结束 pygame 程序。</p><h3 id="exception-pygame-error" tabindex="-1">exception pygame.error <a class="header-anchor" href="#exception-pygame-error" aria-label="Permalink to &quot;exception pygame.error&quot;">​</a></h3><blockquote><p>标准的 pygame 异常。</p></blockquote><div class="language-Python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">raise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pygame.error(message)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当 pygame 或 SDL 操作失败时，将会引发异常。你可以捕获任何可预见的问题并处理异常。报告异常时，会同时显示问题的描述信息。</p><p>它是 RuntimeError 异常的子类，用于捕获这些异常。</p><h3 id="pygame-get-error" tabindex="-1">pygame.get_error() <a class="header-anchor" href="#pygame-get-error" aria-label="Permalink to &quot;pygame.get_error()&quot;">​</a></h3><p>得到当前错误信息。</p><p>get_error() -&gt; errorstr</p><p>获取 SDL 维护的一个内部错误消息。当标准 pygame.error() 标准 pygame 异常引发时，这些信息将会提供给你。</p><p>其实你很少会使用到这个方法的啦。</p><h3 id="pygame-set-error" tabindex="-1">pygame.set_error() <a class="header-anchor" href="#pygame-set-error" aria-label="Permalink to &quot;pygame.set_error()&quot;">​</a></h3><p>设置当前错误信息。</p><p>set_error(error_msg) -&gt; None</p><p>设置 SDL 维护的一个内部错误消息。当标准 pygame.error() 标准 pygame 异常引发时，这些信息将会提供给你。</p><p>其实你很少会使用到这个方法的啦。</p><h3 id="pygame-get-sdl-version" tabindex="-1">pygame.get_sdl_version() <a class="header-anchor" href="#pygame-get-sdl-version" aria-label="Permalink to &quot;pygame.get_sdl_version()&quot;">​</a></h3><p>获得 SDL 的版本号。</p><p>get_sdl_version() -&gt; major, minor, patch</p><p>返回 SDL 库有关版本的 3 个数字。这个版本是在编译时生成的。这个方法可用来得知哪个元件是不能正常使用的。</p><p>Pygame 1.7.0 新添加的方法。</p><h3 id="pygame-get-sdl-byteorder" tabindex="-1">pygame.get_sdl_byteorder() <a class="header-anchor" href="#pygame-get-sdl-byteorder" aria-label="Permalink to &quot;pygame.get_sdl_byteorder()&quot;">​</a></h3><p>获得 SDL 的字节顺序。</p><p>get_sdl_byteorder() -&gt; int</p><p>获得 SDL 库的字节顺序。返回 LIL_ENDIAN 表示小端字节顺序；返回 BIG_ENDIAN 表示大端字节顺序。</p><p>Pygame 1.8 新添加的方法。</p><h3 id="pygame-register-quit" tabindex="-1">pygame.register_quit() <a class="header-anchor" href="#pygame-register-quit" aria-label="Permalink to &quot;pygame.register_quit()&quot;">​</a></h3><p>注册一个函数，这个函数将在 pygame 退出时被调用。</p><p>register_quit(callable) -&gt; None</p><p>当调用 pygame.quit() 结束所有模块时，所有通过 register_quit() 方法注册过的函数将被调用。这一切都是自动执行的。</p><p>一般的 pygame 用户用不到这个方法。</p><h3 id="pygame-encode-string" tabindex="-1">pygame.encode_string() <a class="header-anchor" href="#pygame-encode-string" aria-label="Permalink to &quot;pygame.encode_string()&quot;">​</a></h3><p>对 unicode 或字节对象进行编码。</p><p>encode_string([obj [, encoding [, errors [, etype]]]]) -&gt; bytes or None</p><p>obj：</p><p>传入 unicode 类型 -&gt; 编码 传入 bytes 类型 -&gt; 不变 传入其他类型 -&gt; 返回 None 没有传递 obj 参数 -&gt; 引起 SyntaxError 异常</p><p>encoding (string)：如果存在则进行编码，默认是 unicode_escape。</p><p>errors (string)：指定如何处理无法编码的内容，默认使用反斜杠（\\）代替。</p><p>etype (exception type)：指定编码错误引发的异常类型。默认为 UnicodeEncodeError，由 PyUnicode_AsEncodedString() 返回。对于默认的编码和错误值不应该有编码错误。</p><p>这个函数被用于编码文件路径的时候，支持使用关键字参数。</p><p>Pygame 1.9.2 新增加的方法（主要用于单元测试）。</p><h3 id="pygame-encode-file-path" tabindex="-1">pygame.encode_file_path() <a class="header-anchor" href="#pygame-encode-file-path" aria-label="Permalink to &quot;pygame.encode_file_path()&quot;">​</a></h3><p>将 unicode 或 bytes 对象编码为文件系统路径。</p><p>encode_file_path([obj [, etype]]) -&gt; bytes or None</p><p>obj：</p><p>传入 unicode 类型 -&gt; 编码 传入 bytes 类型 -&gt; 不变 传入其他类型 -&gt; 返回 None 没有传递 obj 参数 -&gt; 引起 SyntaxError 异常</p><p>etype（异常类型）：若给出，则出现异常时报相应编码错误，默认为 UnicodeEncodeError，由 PyUnicode_AsEncodedString() 返回。</p><p>这个函数被用于编码文件路径的时候，结果由 sys.getfilesystemencoding() 返回，支持使用关键字参数。</p><p>Pygame 1.9.2 新增加的方法（主要用于单元测试）。</p>`,66),s=[i];function o(n,g,l,m,y,d){return p(),a("div",null,s)}const u=e(r,[["render",o]]);export{c as __pageData,u as default};
