import{_ as s,c as a,o as i,aS as e}from"./chunks/framework.Dbjoj8K5.js";const b=JSON.parse('{"title":"Flask基本操作","description":"介绍flask基本使用，方法","frontmatter":{"date":"2023.8.21","title":"Flask基本操作","tags":["flask","web","python"],"description":"介绍flask基本使用，方法","link":"/flask/flask-basic.html"},"headers":[],"relativePath":"flask/flask-basic.md","filePath":"flask/flask-basic.md","lastUpdated":1708595833000}'),l={name:"flask/flask-basic.md"},n=e(`<h1 id="flask基本操作" tabindex="-1">Flask基本操作 <a class="header-anchor" href="#flask基本操作" aria-label="Permalink to &quot;Flask基本操作&quot;">​</a></h1><blockquote><p><a href="https://dormousehole.readthedocs.io/en/latest/" target="_blank" rel="noreferrer">https://dormousehole.readthedocs.io/en/latest/</a></p></blockquote><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-VSzRH" id="tab-GHJ64lO" checked="checked"><label for="tab-GHJ64lO">pip</label><input type="radio" name="group-VSzRH" id="tab-59QBHIS"><label for="tab-59QBHIS">poetry</label></div><div class="blocks"><div class="language-shell vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip install Flask</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> poetry add Flask</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><h2 id="快速上手" tabindex="-1">快速上手 <a class="header-anchor" href="#快速上手" aria-label="Permalink to &quot;快速上手&quot;">​</a></h2><p>本文会给您好好介绍如何上手 Flask 。</p><h3 id="一个最小的应用" tabindex="-1">一个最小的应用 <a class="header-anchor" href="#一个最小的应用" aria-label="Permalink to &quot;一个最小的应用&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flask </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flask</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flask(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__name__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@app.route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello_world</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="以上代码的意义" tabindex="-1">以上代码的意义 <a class="header-anchor" href="#以上代码的意义" aria-label="Permalink to &quot;以上代码的意义&quot;">​</a></h4><ul><li><p>1.首先我们导入了 Flask 类。该类的实例将会成为我们的 WSGI 应用。</p></li><li><p>2.接着我们创建一个该类的实例。第一个参数是应用模块或者包的名称。 <code>__name__</code> 是一个适用于大多数情况的快捷方式。有了这个参数， Flask 才能知道在哪里可以找到模板和静态文件等东西。</p></li><li><p>3.然后我们使用 <code>route()</code> 装饰器来告诉 <code>Flask</code> 触发函 数的 URL 。</p></li><li><p>4.函数返回需要在用户浏览器中显示的信息。默认的内容类型是 HTML ，因此 字符串中的 HTML 会被浏览器渲染。</p></li></ul><h4 id="注意" tabindex="-1">注意！！！ <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意！！！&quot;">​</a></h4><p>把它保存为 <code>hello.py</code> 或其他类似名称。请不要使用 <code>flask.py</code> 作为应用名称，这会与 Flask 本身发生冲突。</p><p>可以使用 <code>flask</code> 命令或者 <code>python -m flask </code>来运行这个应 用。你需要使用 <code>--app</code> 选项告诉 Flask 哪里可以找到应用。详见 <a href="/flask/flask.cli.commmad.html">命令行接口</a> 。</p><h3 id="应用" tabindex="-1">应用 <a class="header-anchor" href="#应用" aria-label="Permalink to &quot;应用&quot;">​</a></h3><p>这样就启动了一个非常简单的内建的服务器。这个服务器用于测试应该是足够 了，但是用于生产可能是不够的。关于部署的有关内容参见<a href="/flask/flask-bushu.html">生产部署</a> 。</p><p>现在在浏览器中打开 <a href="http://127.0.0.1:5000/" target="_blank" rel="noreferrer">http://127.0.0.1:5000/</a> ，应该可以看到 Hello World! 字样。</p><p>如果其他程序已经占用了 5000 端口，那么在尝试启动服务器时会看到 OSError: [Errno 98] 或者 OSError: [WinError 10013], 地址已被占用。</p><h2 id="调试模式" tabindex="-1">调试模式 <a class="header-anchor" href="#调试模式" aria-label="Permalink to &quot;调试模式&quot;">​</a></h2><p><code>flask run </code>命令不只可以启动开发服务器。如果您打开调试模式，那么服 务器会在修改应用代码之后自动重启，并且当请求过程中发生错误时还会在浏 览器中提供一个交互调试器。</p><p>如果要打开调试模式，请使用 --debug 选项。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flask --app hello run --debug</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Serving Flask app &#39;hello&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Debug mode: on</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Running on http://127.0.0.1:5000 </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Press</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CTRL+C to quit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Restarting with stat</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Debugger is active!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Debugger PIN: nnn-nnn-nnn</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>另见：</p><ul><li><a href="/flask/flask-bushu.html">开发服务器</a> 和 <a href="/flask/flask.cli.commmad.html">命令行接口</a> 包含有关调试模式运行的内容。</li></ul><h2 id="html-转义" tabindex="-1">HTML 转义 <a class="header-anchor" href="#html-转义" aria-label="Permalink to &quot;HTML 转义&quot;">​</a></h2><p>当返回 HTML （ Flask 中的默认响应类型）时，为了防止注入攻击，所有用户 提供的值在输出渲染前必须被转义。使用 Jinja （这个稍后会介绍）渲染的 HTML 模板会自动执行此操作。</p><p>在下面展示的 <code>escape()</code> 可以手动转义。因为保持简洁的 原因，在多数示例中它被省略了，但您应该始终留心处理不可信的数据。</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> markupsafe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> escape</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@app.route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&lt;name&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">escape(name)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果一个用户想要提交其名称为 <code>&lt;script&gt;alert(&quot;bad&quot;)&lt;/script&gt;</code> ，那么 宁可转义为文本，也好过在浏览器中执行脚本。</p><p>路由中的 <code>&lt;name&gt;</code> 从 URL 中捕获值并将其传递给视图函数。这些变量规则 见下文。</p>`,29),p=[n];function t(h,r,k,d,o,c){return i(),a("div",null,p)}const g=s(l,[["render",t]]);export{b as __pageData,g as default};
