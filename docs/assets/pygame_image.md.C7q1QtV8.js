import{_ as e,c as a,o as t,aS as i}from"./chunks/framework.Dbjoj8K5.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"pygame/image.md","filePath":"pygame/image.md","lastUpdated":1708595373000}'),r={name:"pygame/image.md"},l=i('<h2 id="pygame-image" tabindex="-1">pygame.image <a class="header-anchor" href="#pygame-image" aria-label="Permalink to &quot;pygame.image&quot;">​</a></h2><blockquote><p>用于图像传输的 Pygame 模块。</p></blockquote><ul><li>pygame.image.load() — 从文件加载新图片</li><li>pygame.image.save() — 将图像保存到磁盘上</li><li>pygame.image.get_extended() — 检测是否支持载入扩展的图像格式</li><li>pygame.image.tostring() — 将图像转换为字符串描述</li><li>pygame.image.fromstring() — 将字符串描述转换为图像</li><li>pygame.image.frombuffer() — 创建一个与字符串描述共享数据的 Surface 对象</li></ul><p>image 模块包含了加载和保存图像的函数，同时转换为 Surface 对象支持的格式。</p><p>注意：没有 Image 类；当一个图像被成功载入后，将转换为 Surface 对象。Surface 对象允许你在上边画线、设置像素、捕获区域等。</p><p>Image 是 Pygame 相当依赖的一个模块，支持载入的图像格式如下：</p><ul><li>JPG</li><li>PNG</li><li>GIF（无动画）</li><li>BMP</li><li>PCX</li><li>TGA（无压缩）</li><li>TIF</li><li>LBM（和 PBM）</li><li>PBM（和 PGM，PPM）</li><li>XPM</li></ul><p>支持保存为以下格式：</p><ul><li>BMP</li><li>TGA</li><li>PNG</li><li>JPEG</li></ul><p>其中，保存为 PNG 和 JPEG 格式是 Pygame 1.8 新增加的。</p><h3 id="pygame-image-load" tabindex="-1">pygame.image.load() <a class="header-anchor" href="#pygame-image-load" aria-label="Permalink to &quot;pygame.image.load()&quot;">​</a></h3><p>从文件加载新图片。</p><p>load(filename) -&gt; Surface</p><p>load(fileobj, namehint=””) -&gt; Surface</p><p>从文件加载一张图片，你可以传递一个文件路径或一个 Python 的文件对象。</p><p>Pygame 将自动判断图像的格式（比如 GIF 或位图）并创建一个新的 Surface 对象。有时它可能需要知道文件的后缀名（比如 GIF 图像应该以 &quot;.gif&quot; 为后缀）。如果你传入原始文件对象，你需要传入它对应的文件名到 namehint 参数中。</p><p>返回的 Surface 对象将包含与源文件相同的颜色格式，colorkey 和 alpha 透明度通道。你通常需要调用 Surface.convert() 函数进行转换，这样可以使得在屏幕上绘制的速度更快。</p><p>对于含有 alpha 通道的图片（支持部分位置透明，像 PNG 图像），需要使用 surface.convert_alpha() 函数进行转换。</p><p>在某些环境下，Pygame 可能无法支持上述所有的图像格式，但至少无压缩的 BMP 格式是支持的。你可以调用 pygame.image.get_extended() 函数，如果返回 True，说明可以加载上述的格式（包含 PNG，JPG 和 GIF）。</p><p>你应该使用 os.path.join() 提高代码的兼容性：</p><div class="language-Python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">asurf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pygame.image.load(os.path.join(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;FishC.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="pygame-image-save" tabindex="-1">pygame.image.save() <a class="header-anchor" href="#pygame-image-save" aria-label="Permalink to &quot;pygame.image.save()&quot;">​</a></h3><p>将图像保存到磁盘上。</p><p>save(Surface, filename) -&gt; None</p><p>该函数将保存 Surface 对象到磁盘上，支持存储为 BMP，TGA，PNG 或 JPEG 格式的图像。如果 filename 没有指定后缀名，那么默认是保存为 TGA 格式。TGA 和 BMP 格式是无压缩的文件。</p><p>保存为 PNG 和 JPEG 格式是 Pygame 1.8 新增的。</p><h3 id="pygame-image-get-extended" tabindex="-1">pygame.image.get_extended() <a class="header-anchor" href="#pygame-image-get-extended" aria-label="Permalink to &quot;pygame.image.get_extended()&quot;">​</a></h3><p>检测是否支持载入扩展的图像格式。</p><p>get_extended() -&gt; bool</p><p>如果 Pygame 支持上述所有的扩展图像格式，则返回 True。</p><h3 id="pygame-image-tostring" tabindex="-1">pygame.image.tostring() <a class="header-anchor" href="#pygame-image-tostring" aria-label="Permalink to &quot;pygame.image.tostring()&quot;">​</a></h3><p>将图像转换为字符串描述。</p><p>tostring(Surface, format, flipped=False) -&gt; string</p><p>将图像转换为一个字符串描述，可以被 Python 的其他图像模块通过 &quot;fromstring&quot; 转换回图像。一些 Python 图像模块喜欢“自下而上”的存储格式（例如 PyOpenGL）。如果 flipped 参数为 True，那么字符串将会垂直翻转以适用这类图像模块。</p><p>format 参数可以是下表中任何一个字符串。注意：只有 8 位的 Surface 对象可以使用 &quot;P&quot; 格式。其他格式可以用于任何 Surface 对象上。</p><table><thead><tr><th style="text-align:center;">字符串</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">P</td><td style="text-align:center;">8 位调色板的 Surface 对象</td></tr><tr><td style="text-align:center;">RGB</td><td style="text-align:center;">24 位图像</td></tr><tr><td style="text-align:center;">RGBX</td><td style="text-align:center;">32 位图像，不留空白</td></tr><tr><td style="text-align:center;">RGBA</td><td style="text-align:center;">32 位图像，带 alpha 通道</td></tr><tr><td style="text-align:center;">ARGB</td><td style="text-align:center;">32 位图像，带 alpha 通道，并将 alpha 放在前边</td></tr><tr><td style="text-align:center;">RGBA_PREMULT</td><td style="text-align:center;">32 位图像，通过 alpha 通道缩放</td></tr><tr><td style="text-align:center;">ARGB_PREMULT</td><td style="text-align:center;">32 位图像，通过 alpha 通道缩放，并将 alpha 放在前边</td></tr></tbody></table><h3 id="pygame-image-fromstring" tabindex="-1">pygame.image.fromstring() <a class="header-anchor" href="#pygame-image-fromstring" aria-label="Permalink to &quot;pygame.image.fromstring()&quot;">​</a></h3><p>将字符串描述转换为图像。</p><p>fromstring(string, size, format, flipped=False) -&gt; Surface 该函数的使用跟 pygame.image.tostring() 相似。size 参数是一对表示宽度和高度的数字。一旦新的 Surface 对象创建成功，你就可以删除字符串描述。</p><p>size 和 format 参数指定的数据需要跟字符串描述相符，否则将抛出异常。</p><p>更快地将图片转换到 Pygame，请参考 pygame.image.frombuffer() 函数。</p><h3 id="pygame-image-frombuffer" tabindex="-1">pygame.image.frombuffer() <a class="header-anchor" href="#pygame-image-frombuffer" aria-label="Permalink to &quot;pygame.image.frombuffer()&quot;">​</a></h3><p>创建一个与字符串描述共享数据的 Surface 对象。</p><p>frombuffer(string, size, format) -&gt; Surface</p><p>创建一个新的 Surface 对象，与字符串描述直接共享像素数据。该函数的使用跟 pygame.image.fromstring() 类似，但没法垂直翻转原始数据。</p><p>该函数的速度会比 pygame.image.fromstring() 快很多，因为该函数不需要申请和拷贝任何像素数据。</p>',46),p=[l];function g(n,s,m,o,d,h){return t(),a("div",null,p)}const f=e(r,[["render",g]]);export{y as __pageData,f as default};
