import{_ as a,c as e,o as l,aS as t}from"./chunks/framework.Dbjoj8K5.js";const f=JSON.parse('{"title":"Web全栈介绍","description":"介绍Web全栈","frontmatter":{"date":"2023.8.20","title":"Web全栈介绍","tags":["flask","python","web"],"description":"介绍Web全栈"},"headers":[],"relativePath":"flask/introduce-web.md","filePath":"flask/introduce-web.md","lastUpdated":1700227085000}'),i={name:"flask/introduce-web.md"},o=t('<h1 id="web全栈" tabindex="-1">Web全栈 <a class="header-anchor" href="#web全栈" aria-label="Permalink to &quot;Web全栈&quot;">​</a></h1><p>定义：Web全栈，是将<strong>前端技术</strong>、<strong>后端技术</strong>、<strong>前后端交互技术</strong>、<strong>数据处理及系统部署</strong>等技能都能用起来的开发方式。 既能写界面，又能写后台，还可以把数据库、系统环境之类的都搞定。 全栈技术指可以完成整个项目搭建的有效集合。 包括：网站的设计，web前端开发，web后端开发，数据库设计，接口和组件，移动端开发，产品设计，系统架构，产品的理念和用户体验，理解和定义需求。</p><h2 id="项目" tabindex="-1">项目 <a class="header-anchor" href="#项目" aria-label="Permalink to &quot;项目&quot;">​</a></h2><p>web全栈项目开发大致可以分为：</p><ul><li>1.前后端不分离</li><li>2.前后端部分分离</li><li>3.前后端分离</li></ul><h3 id="前后端不分离" tabindex="-1">前后端不分离 <a class="header-anchor" href="#前后端不分离" aria-label="Permalink to &quot;前后端不分离&quot;">​</a></h3><blockquote><p> 在前后端不分离的应用模式中,前端页面看到的效果都是由后端控制,由后端渲染页面或重定向,也就是后端需要控制前端的展示,前端与后端的耦合度很<span style="font-weight:1000;">高</span>。 **是同步写法** </p></blockquote><h4 id="同步" tabindex="-1">同步 <a class="header-anchor" href="#同步" aria-label="Permalink to &quot;同步&quot;">​</a></h4><p>浏览器 --&gt; 请求服务器</p><p>浏览器 &lt;-- 服务器</p><p>浏览器 --&gt; 请求服务器</p><p>浏览器 &lt;-- 服务器</p><p>浏览器 --&gt; 请求服务器</p><p>浏览器 &lt;-- 服务器 （服务器返回数据）</p><p>默认的表单，只有请求完一次，才能请求下一次，并且post\\put\\delete...都要返回一个页面，因为默认的form表单 会重定向，只有重定向这个post请求返回一个页面才能显示数据，便于消息闪现</p><p>为什要要这重定向这个post请求返回一个页面，便于消息闪现？？？ 因为flask官方的消息闪现是就是前后端不分离式，开发简单，很容易理解，但是内存开销大</p><h4 id="form表单" tabindex="-1">form表单 <a class="header-anchor" href="#form表单" aria-label="Permalink to &quot;form表单&quot;">​</a></h4><p>form 表单无法接收json返回的数据 解决方案：</p><ul><li>1.在post请求返回模板，并使用flash闪现，实现前后端连接，传输数据</li><li>2.使用异步方式实现，也就是前后端半分离，或全分离实现</li></ul><h3 id="前后端部分分离" tabindex="-1">前后端部分分离 <a class="header-anchor" href="#前后端部分分离" aria-label="Permalink to &quot;前后端部分分离&quot;">​</a></h3><blockquote><p> 前后端半分离，前端负责开发页面，通过接口（Ajax）获取数据，采用js操作对页面进行数据绑定，最终是由前端把页面渲染出来 **是异步写法** </p></blockquote><h4 id="异步" tabindex="-1">异步 <a class="header-anchor" href="#异步" aria-label="Permalink to &quot;异步&quot;">​</a></h4><p>浏览器 --&gt; 请求服务器</p><p>浏览器 --&gt; 请求服务器</p><p>浏览器 &lt;-- 服务器</p><p>浏览器 --&gt; 请求服务器</p><p>浏览器 &lt;-- 服务器</p><p>浏览器 &lt;-- 服务器</p><p>浏览器 --&gt; 请求服务器</p><p>浏览器 &lt;-- 服务器</p><p>可以几个请求在一起，可以一起接受数据</p><p>这样不用form默认表单进行提交，就需要ajax\\fetch进行提交 返回的数据可以是json格式，请求的接口这就是api，不显示页面不渲染页面，只做逻辑处理并返回结果</p><h3 id="前后端分离" tabindex="-1">前后端分离 <a class="header-anchor" href="#前后端分离" aria-label="Permalink to &quot;前后端分离&quot;">​</a></h3><blockquote><p> 后台只需提供API接口，前端调用AJAX实现数据呈现。 **是异步写法** </p></blockquote><h4 id="异步-1" tabindex="-1">异步 <a class="header-anchor" href="#异步-1" aria-label="Permalink to &quot;异步&quot;">​</a></h4><p>浏览器 --&gt; 请求服务器</p><p>浏览器 --&gt; 请求服务器</p><p>浏览器 &lt;-- 服务器</p><p>浏览器 --&gt; 请求服务器</p><p>浏览器 &lt;-- 服务器</p><p>浏览器 &lt;-- 服务器</p><p>浏览器 --&gt; 请求服务器</p><p>浏览器 &lt;-- 服务器</p><p>可以几个请求在一起，可以一起接受数据</p><p>这样不用form默认表单进行提交，就需要ajax\\fetch进行提交 返回的数据可以是json格式，请求的接口这就是api，不显示页面不渲染页面，只做逻辑处理并返回结果 <strong>注</strong>：现在web开发趋势逐渐走向<strong>前后端分离</strong></p><h2 id="前端" tabindex="-1">前端 <a class="header-anchor" href="#前端" aria-label="Permalink to &quot;前端&quot;">​</a></h2><h3 id="原生-不需要用打包工具" tabindex="-1">原生（不需要用打包工具） <a class="header-anchor" href="#原生-不需要用打包工具" aria-label="Permalink to &quot;原生（不需要用打包工具）&quot;">​</a></h3><p><code>html</code> + <code>css</code> + <code>js</code></p><h4 id="框架" tabindex="-1">框架 <a class="header-anchor" href="#框架" aria-label="Permalink to &quot;框架&quot;">​</a></h4><p><code>jquery</code> <code>layui</code></p><h3 id="mvvm-框架-需要用打包工具进行打包" tabindex="-1">MVVM 框架（需要用打包工具进行打包） <a class="header-anchor" href="#mvvm-框架-需要用打包工具进行打包" aria-label="Permalink to &quot;MVVM 框架（需要用打包工具进行打包）&quot;">​</a></h3><h4 id="vue框架" tabindex="-1">vue框架 <a class="header-anchor" href="#vue框架" aria-label="Permalink to &quot;vue框架&quot;">​</a></h4><ul><li><code>vue</code></li><li><code>vite</code></li><li><code>vue-router</code></li><li><code>pinia（veux）</code></li><li><code>element-plus （vue 的 ui 框架）</code></li></ul><h4 id="其他框架" tabindex="-1">其他框架 <a class="header-anchor" href="#其他框架" aria-label="Permalink to &quot;其他框架&quot;">​</a></h4><ul><li><p><code>react</code></p></li><li><p><code>angular（国内几乎没有）</code></p></li></ul><h2 id="后端" tabindex="-1">后端 <a class="header-anchor" href="#后端" aria-label="Permalink to &quot;后端&quot;">​</a></h2><p>学习python的建议去学习： flask、fastapi、Django</p><h3 id="flask" tabindex="-1">flask <a class="header-anchor" href="#flask" aria-label="Permalink to &quot;flask&quot;">​</a></h3><blockquote><p> 微框架，只要是一个后端开发的框，可以用于服务器渲染（ssr html）应用的开发，也可以单纯的开发接口 </p></blockquote><ul><li>Flask-SQLalchemy：操作数据库；</li><li>Flask-script：插入脚本；</li><li>Flask-migrate：管理迁移数据库；</li><li>Flask-Session：Session存储方式指定；</li><li>Flask-WTF：表单；</li><li>Flask-Mail：邮件；</li><li>Flask-Bable：提供国际化和本地化支持，翻译；</li><li>Flask-Login：认证用户状态；</li><li>Flask-OpenID：认证；</li><li>Flask-RESTful：开发REST API的工具；</li><li>Flask-Bootstrap：集成前端Twitter Bootstrap框架；</li><li>Flask-Moment：本地化日期和时间；</li><li>Flask-Admin：简单而可扩展的管理接口的框架</li><li><a href="/flask/flask-limiter.html">Flask-Limiter：限制访问频率</a></li></ul><h3 id="fastapi" tabindex="-1">fastapi <a class="header-anchor" href="#fastapi" aria-label="Permalink to &quot;fastapi&quot;">​</a></h3><blockquote><p> 借鉴了很多 flask 开发思想。是一个高性能的 web 服务器，主要是开发前后端分离项目的 api 接口。fastapi 需要对异步技术的掌握 </p></blockquote><h3 id="django" tabindex="-1">django <a class="header-anchor" href="#django" aria-label="Permalink to &quot;django&quot;">​</a></h3><blockquote><p> 为方便业务程序的开发，提供了丰富的工具、组件 </p></blockquote><ul><li><p>django-admin 快速创建项目工程目录</p></li><li><p>manage.py 管理项目工程</p></li><li><p>orm模型（数据库抽象层）</p></li><li><p>admin 后台管理站点</p></li><li><p>缓存机制</p></li><li><p>文件存储系统</p></li><li><p>用户认证系统</p></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>我个人建议搭建 个人博客等的web全栈项目：用前后端部分分离的最好 可以选择：</p><ul><li>前端：layui/bootstrap框架</li><li>后端：flask框架</li></ul><p>搭建前后端分离项目：</p><ul><li>前端：vue框架</li><li>后端：fastapi框架</li></ul><p>搭建前后端不分离项目：不推荐</p>',71),r=[o];function p(s,n,h,d,c,u){return l(),e("div",null,r)}const k=a(i,[["render",p]]);export{f as __pageData,k as default};
