import{_ as e,c as a,o as p,aS as t}from"./chunks/framework.Dbjoj8K5.js";const m=JSON.parse('{"title":"Overlay | Pygame中文文档","description":"","frontmatter":{},"headers":[],"relativePath":"pygame/Overlay.md","filePath":"pygame/Overlay.md","lastUpdated":1708595373000}'),r={name:"pygame/Overlay.md"},o=t(`<h1 id="overlay-pygame中文文档" tabindex="-1">Overlay | Pygame中文文档 <a class="header-anchor" href="#overlay-pygame中文文档" aria-label="Permalink to &quot;Overlay | Pygame中文文档&quot;">​</a></h1><h2 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h2><ul><li>class pygame.Overlay</li></ul><p>Pygame 中用于视频叠加图形的 pygame 对象。</p><pre><code>Overlay(format, (width, height)) -&gt; Overlay
</code></pre><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><ul><li>pygame.Overlay.display — 设置覆盖像素数据</li><li>pygame.Overlay.set_location — 控制显示的地方</li><li>pygame.Overlay.get_hardware — 测试是否支持硬件加速</li></ul><p>Overlay 对象对使用硬件视频覆盖提供支持。视频覆盖不使用标准 RGB 像素格式，并且可以使用多个分辨率的数据来创建一个图像。</p><p>Overlay 对象使用硬件级别的“低级”访问，所以使用这个对象你必须理解视频覆盖的技术细节。</p><p>覆盖的格式决定了使用的像素数据类型。并不是所有的硬件都支持所有类型的覆盖格式。以下是可用的格式类型列表：</p><pre><code>YV12_OVERLAY, IYUV_OVERLAY, YUV2_OVERLAY, UYVY_OVERLAY, YVYU_OVERLAY
</code></pre><p>宽度和高度参数控制覆盖图像的大小。覆盖的图像大小可任意调整，不仅是覆盖图像的原分辨率。覆盖对象总是可见的，并且总是显示在原图像上方显示。</p><h2 id="方法详解" tabindex="-1">方法详解 <a class="header-anchor" href="#方法详解" aria-label="Permalink to &quot;方法详解&quot;">​</a></h2><p><code>display()</code></p><p>设置覆盖像素。</p><p><code>display((y, u, v)) -&gt; None</code></p><p><code>display() -&gt; None</code></p><p>显示 SDL 的覆盖平面的 YUV 数据。，y、u 和 v 参数都是二进制字符串数据，需使用正确格式的数据以创建覆盖图像。</p><p>如果没有参数传入，覆盖的图像仅是当前数据的重新绘制。当覆盖不支持硬件加速，这可能是很有用的。</p><p>如果不是合法、可用的字符串数据，将导致崩溃。</p><p><code>set_location()</code></p><p>设置覆盖图像的显示位置。</p><p><code>set_location(rect) -&gt; None</code></p><p>设置覆盖图图像的位置，覆盖的图像总是显示在原图像的上面，调用此方法并没有立即重绘图像，它将在下一次调用 display() 方法时重新绘制。</p><p><code>get_hardware()</code></p><p>测试覆盖是否支持硬件加速。</p><p><code>get_hardware(rect) -&gt; int</code></p><p>如果支持硬件加速返回 true，若不支持则会使用软件渲染。</p>`,28),l=[o];function d(c,i,s,n,y,_){return p(),a("div",null,l)}const g=e(r,[["render",d]]);export{m as __pageData,g as default};
